<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Morven&#39;s Life</title>
    <link>https://morven.life/posts/</link>
    <description>Recent content in Posts on Morven&#39;s Life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://morven.life/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>我的「2019」</title>
      <link>https://morven.life/posts/the_year_of_2019/</link>
      <pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://morven.life/posts/the_year_of_2019/</guid>
      <description>TL;DR 最近我发现自己对于思考和记录的欲望在慢慢消亡，这是件很令我沮丧的事情。“少愤怒而多思考”的人设正在崩塌，我在向着自己厌恶的方向，附和着，愤怒着，可一旦冷却翻篇之后，又恢复到若无其事的状态。归根结底，我没有以前那么坚定了，对「自我」的认同感逐渐淡化，开始被生活的惯性驱动，不去思考为什么，因为我发现随波逐流原来这么轻松。但始终，我还是没法和自己的内心和解，因为一旦我进入放纵之后的“贤者模式”，我开始恐慌，怀疑。与其被这种循环往复的矛盾折磨，不如投入到工作当中，至少不会有失落感。所以，这一年我基本放弃“抵抗”，避免思考为什么，开始享受这一年加速的节奏。
是告别也是开始 这一年注定是个说再见的一年，作为一个影迷，这个时代的我们也是幸运的，因为我们有着共同的记忆，漫威宇宙；有时候你会感慨十年真的很短，弹指一挥间，反过来想想，终局之战是集结，是重聚，但也是新时代的开始。这一年我们愤怒，声讨HBO，我们会怀念狼家的孩子流离失所的模样，我们期待龙妈身披铠甲力挽狂澜的终章，“问君能有几多愁，恰似六季过后无权游”。但是我们也会惊叹HBO用一种阴冷，克制却令人毛骨悚然的方式将切尔诺贝利的悲鸣呈现出来，它时刻提醒着对于自然与规律，我们始终应该保持敬畏之心。这个时代的我们注定是怀旧的，我们怀念Queen，怀念佛雷迪，遗憾我们没有亲身经历那段充满爱、痛苦和接纳的音乐之旅；我们想以一部《爱尔兰人》重温当年风华正茂的阿尔帕西诺、德尼罗与乔·佩西共同演绎的黑帮传奇；我们想象着上世纪六七十年代风起云涌的好莱坞，光怪陆离的电影中的电影往事；我们在菲尼克斯肆意癫狂的小丑表演中看DC如何在后黑暗骑士时代重新扳回一局；
当然，这一年华语电影也慢慢摆脱流量时代，我们看到了哪吒的横空出世，《流量地球》的荡气回肠，《少年的你》的真实无助；好的影视剧也层出不穷，《我们与恶的距离》让我们学会重新审视现实，《长安十二时辰》让我们领略盛世长安美景的同时也赞叹古人的理想抱负；甚至一些精彩的华语综艺也开始摆脱刻板印象，突出重围，《乐队的夏天》让我们享受音乐的同时开始尊重摇滚；《圆桌派》继续教我们如何做一个人畜无害的空巢老人；《奇葩说》继续满足着我们围观不怕事儿大的幻想。
 每一颗苹果都值得被偷吃。
 这一年还有很多没有提及的优秀作品，它们不只是我们茶余饭后的谈资，甚至是我们迷茫低落时的一颗启明星。很期待在新的一年我们有幸见证更多优秀影视剧的诞生。
一些小小的成就 回顾过去一年，工作上取得了一些小的进步，除了不断完善基础网络层技术栈，也更加深入地钻研了Istio以及Envoy。之前不断横向地扩展自己的知识领域，却没有用心向下深入探索，导致面对很多技术话题都可以侃侃而谈，可是遇到实际问题的时候无处下手。于是干脆从现实案例出发，在多耦合的复杂环境中练级打怪。
上半年处于持续的三线程并发工作状态，一方面完成日常的ICP Roadmap开发任务，另一方面帮助在客户在生产环境实施Istio，同时，还要在Istio社区推动开源产品的不断演进。
由于工作资源变动，年中有一段时间在Kubernetes-Sig社区参与开发Cluster-api，参与周期并不是很长，很多问题并没有深入研究，但也有所成就。
九月初开始深入调研Kubernetes CICD利器Prow，并将部分项目从Travis迁移到Prow，Prow的好处在于提供了各种插件完成Travis, CirleCI等CICD工具没有的命令式自动化工具，对于Kubernetes原生项目尤其友好。
这一年下来收获也不少，一方面帮助客户完成了将Istio投入生产，另一方面，从Istio1.1到1.4，保证了每三个月的大版本更新顺利更新，最重要的是，使得Istio1.0发布之初的性能问题得到显著改善，同时，Istio官方提供的Operator也随1.4的发布正式投入使用。这也是我个人投入时间比较多的项目之一。另外，也和同事一起完成了Cluster API for IBM Cloud Provider第一个版本的开源与发布。在十月份的时候，开始将Prow投入到生产环境，将公司部分开源项目从Travis切换到Prow。另外，大约在三月份的时候，收到了机械工业出版社的写本关于Istio实践书的邀请，当时我并没有答应，原因一方面是我觉得个人的经验无法承担这样一个角色，另一方面我对于完成这样一本书的意义持保留态度。
新的期待 不知道我是否还理智和清醒，我很享受这一年的加速节奏，甚至工作的惯性让我持续地处于颅内高潮的状态，以至于偶尔“悠闲时光”里我懒得去思考这些到底有没有意义。
我依稀记得年初我斗志昂扬的给自己定了flag:
 Make things happen.
 我不知道自己的计划是不是已经完成，但是我能确定的是在接下来的一年里面，怎么也得给战斗升个级，更加激进的计划才能逼迫憋出大招：
 取法乎上，得乎其中；取法乎中，得乎其下；取法呼下，无所得矣。
 总之，一句话，来年再战！</description>
    </item>
    
    <item>
      <title>六字回忆录</title>
      <link>https://morven.life/posts/memory_with_six_word/</link>
      <pubDate>Sat, 26 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://morven.life/posts/memory_with_six_word/</guid>
      <description>前几天晚上我发现了一个很有意思叫做sixwordmemoirs的网站，上面收集了很多六个英文单词组成的回忆录，特别类似于国内前几年风行一时的“三行情书”大赛。
我很好奇这样一个温暖而有趣的想法是怎么被提出来的。索性从床上爬起来，经过几番搜索，终于知道原来是早在2006年的时候美国的网络杂志SMITH Magazine发起了一个活动，要求读者用6个词来描述自己过去5年的生活。结果得到了出乎意料的热烈反响，美国各地的民众纷纷寄去了自己的&amp;rdquo;六字回忆录&amp;rdquo;，甚至在2009年的时候，这些回忆录被汇编一本书：《Six-Word Memoirs on Love and Heartbreak》。此书出版后，成了《纽约时报》畅销书，评价也很正面。费城一家报纸打趣地说：&amp;rdquo;Buy it, keep it in bathroom&amp;rdquo;（去买一本，放在马桶边）。
再后来，SMITH Magazin基于这个想法开发了sixwordmemoirs的网站，所有人都可以随时都可以投稿，还可以详细的描述回忆录背后的故事，展现在全世界读者的面前。
我搬运了一些比较有意思的几条：
 Cursed with cancer. Blessed by friends. - 一个9岁的白血病患者
I still make coffee for two. - 一位失去丈夫的女士
You eleven? You brave, ya&amp;rsquo; know. - 一位爷爷鼓励自己的孙女
 其实，更多的关于爱情故事：
 Eight letters; so hard to say.
It&amp;rsquo;s her smile. The real one.
You left footprints across my heart.
I blush. He smirks. We hug.
 其实在很久之前，我就在构思创建一个供所有人记录故事，分享心得的平台，但我内心深处的惰性决定了我还是作为产品的消费者，对于设计与运维抱着惯有的敬畏心态，所以，很多想法终究只是想法。这或许是很好的契机，开发一个留下故事，收获灵感的平台。</description>
    </item>
    
    <item>
      <title>Istio的前世今生</title>
      <link>https://morven.life/posts/the_history_of_istio/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://morven.life/posts/the_history_of_istio/</guid>
      <description>其实要彻底了解Istio以及服务网格出现的背景，就得从计算机发展的早期说起。
下面这张图展示的的通信模型变种其实从计算机刚出现不久的上世纪50年代开始就得到广泛应用，那个时候，计算机很稀有，也很昂贵，人们手动管理计算机之间的连接，图中绿色的网络栈底层只负责传输电子信号和字节码：
随着计算机变得越来越普及，价格也没那么贵了，计算机之间的连接数量和通信的数据量出现了疯狂式的增长，人们越来越依赖网络系统，工程师们必须确保他们开发的服务能够满足用户的要求。于是，如何提升系统质量成为人们关注的焦点。机器需要知道如何找到其他节点，处理同一个通道上的并发连接，与非直接连接的机器发生通信，通过网络路由数据包，加密流量……除此之外，还需要流量控制机制，流量控制可以防止下游服务器给上游服务器发送过多的数据包。
于是，在一段时期内，开发人员需要在自己的代码里处理上述问题。在下面这张图的示例中，为了确保下游服务器不给其他上游服务造成过载，应用程序需要处理流量控制逻辑，于是网络中的流量控制逻辑和业务逻辑就混杂在一起：
幸运的是，上世纪60年代末，TCP/IP协议栈的出现解决了可靠传输和流量控制等问题，此后尽管网络逻辑代码依然存在，但已经从应用程序里抽离出来，成为操作系统网络栈的一部分，工程师只需要按照操作系统的调用接口进行编程就可以解决基础的网络传输问题：
进入21世纪，计算机越来越普及，也越来越便宜，相互连接的计算机节点越来越多，业界出现了各种网络系统，如分布式代理和面向服务架构(SOA)：
分布式为我们带来了更高层次的能力和好处，但却带来了新的挑战。这时候工程师的重心开始转移到应用程序的网络功能上面，这时候的服务之间的对话以“消息”为传输单元，当工程师们通过网络进行调用服务时，必须能为应用程序消息执行超时、重试、确认等操作。
于是，有工程师是开始尝试使用消息主干网（messaging backbone）集中式地来提供、控制应用程序网络功能，如服务发现、负载均衡、重试等等，甚至，比如协议调解、消息转换、消息路由、编排等功能，因为他们觉得如果可以将这些看似同一层面的内容加入到基础设施中，应用程序或许会更轻量、更精简、更敏捷等等。这些需求绝对是真实的，ESB(Enterprise Service Bus)演变并满足了这些需要。ESB在是2005年被提出的，它的概念特别类似于计算机硬件概念里的USB, USB作为电脑中的标准扩展接口，可以连接各种外部设备；而ESB则就把路由管理、协议转换、策略控制等通用应用程序网络功能加到现有的集中式消息总线里：
这看似行得通！
可是，在实施SOA架构的时候，工程师们发现这种架构有点儿用力过度，矫枉过正了。集中式的消息总线往往会成为架构的瓶颈，用它来进行流量控制、路由、策略执行等并不像我们想象那么容易。加上组织结构过于复杂，使用专有格式（XML等），需要业务逻辑需要实现路由转换和编排等功能，各个服务之间耦合度很高，在敏捷运动的时代背景下，ESB架构已经无法跟上时代的节奏了。
在接下来的几年内，REST革命和API优先的思潮孕育了微服务架构应用，而以docker为代表的容器技术和以Kubernetes为代表的容器编排技术的出现促进了微服务架构的落地。事实上，微服务时代可以以Kubernetes的出现节点划分为“前微服务时代”和“后微服务时代”：
“前微服务时代”基本上是微服务作为用例推动容器技术的发展，而到“后微服务时代”，特别是成为标准的Kubernetes其实在驱动和重新定义微服务的最佳实践，容器和Kubernetes为微服务架构的落地提供了绝佳的客观条件。微服务架构有很多好处，比如：
 快速分配计算资源 快速部署升级迭代 易于分配的存储 易于访问的边界等等  但是作为较复杂的分布式系统，微服务架构给运维带来了新的挑战。当工程师开始接尝试微服务架构，必须考虑如何进行微服务治理。狭义的微服务治理，关注的是微服务组件之间的连接与通讯，例如服务注册发现、东西向路由流控、负载均衡、熔断降级、遥测追踪等。
历史总是惊人的相似，第一批采用微服务架构的企业遵循的是与第一代网络计算机系统类似的策略，也就是说，解决网络通信问题的任务又落在了业务工程师的肩上。
这个时候出现了看到诸如Netflix OSS堆栈、Twitter Finagle以及赫赫有名的Spring Cloud这样的框架和类库帮助业务工程师快速开发应用程序级别的网路功能，只需要写少量代码，就可以把服务发现，负载均衡，路由管理，遥测收集，监控告警等这些功能实现：
但是如果仔细想一下的话，就会发现这样编写微服务程序的问题很明显。
这些类库或者框架是特定语言编写的，并且混合在业务逻辑中（或在整个基础设施上层分散的业务逻辑中）。姑且不说类库和框架的学习成本和门槛，我们知道微服务架构问世的一个承诺就是不同的微服务可以采用不同的编程语言来编写，可是当你开始编写代码的时候会发现有些语言还没有提供对应的类库。这是一个尴尬的局面！这个问题非常尖锐，为了解决这个问题，大公司通常选择就是统一编程语言来编写微服务代码另外的问题是，升级怎么办？框架不可能一开始就完美无缺，所有功能都齐备，没有任何BUG。升级一般都是逐个版本递进升级，一旦出现客户端和服务器端版本不一致，就要小心维护兼容性。实际上，每做出一次变更都需要进行集成、测试，还要重新部署所有的服务——尽管服务本身并没有发生变化。
与网络协议栈一样，工程师们急切地希望能够将分布式服务所需要的一些特性放到底层的平台中。这就像工程师基于HTTP协议开发非常复杂的应用，无需关心底层TCP如何控制数据包。在开发微服务时也是类似的，业务工程师们聚焦在业务逻辑上，不需要浪费时间去编写服务基础设施代码或管理系统用到的软件库和框架。把这种想法囊括到之前架构中，就是下边这幅图所示的样子：
不过，在网络协议栈中加入这样的一个层是不实际的。貌似可以尝试一下代理的方案！事实上，确实有有一些先驱者，尝试过使用代理的方案，例如nginx，haproxy，proxygen等代理。也就是说，一个服务不会直接与上游服务发生连接，所有的流量都会流经代理，代理会拦截服务之间的请求并转发到上游服务。可是，那时候代理的功能非常简陋，很多工程师尝试之后觉得没有办法实现服务的客户端所有的需求。
在这样的诉求下，第一代的Sidecar出现了，Sidecar扮演的角色和代理很像，但是功能就齐全很多，基本上原来微服务框架在客户端实现的功能都会有对应的实现：
但是第一代的sidecar有一个重要的限制，它们是专门为特定基础设施组件而设计的，导致无法通用。例如，Airbnb的Nerve和Synapse，它们工作的基础是服务一定是注册到ZooKeeper上的，而Netflix的Prana要求一定要使用Netflix自己的Eureka注册服务&amp;hellip;
随着微服务架构日渐流行，新一波的sidecar出现了，可以用在不同基础设施组件上，我们把他们叫做通用型的sidecar。其中Linkerd是业界第一个通用型sidecar，它是基于Twitter微服务平台而开发的，实际上也正是它创造了Service Mesh，即服务网格的概念。2016年1月15日，Linkerd 0.0.7版本发布，随后加入CNCF，1.0版本于2017年4月份发布；随后的通用型sidecar就是大名鼎鼎来自于Lyft的envoy，Lyft在2016年9月发布envoy的1.0版本之后。2017年9月envoy加入CNCF；最后一个比较新的sidecar来自于我们熟悉的NGINX，叫做Nginmesh，2017年9月发布了第一个版本。
有了通用型sidecar，每个微服务都会有一个sidecar代理与之配对，服务间通信都是通过sidecar代理进行的。正如我们在下这幅图上看到的那样，sidecar代理之间的连接形成了一种网格网络：
这就是服务网格概念的来源，下面是服务网格概念地官方定义，它不再把sidecar代理看成单独的组件，并强调了这些sidecar代理所形成的网络的重要性。
 A service mesh is a dedicated infrastructure layer for making service-to-service communication safe, fast, and reliable.</description>
    </item>
    
    <item>
      <title>一份好吃的Istio入门餐</title>
      <link>https://morven.life/posts/getting_started_istio/</link>
      <pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://morven.life/posts/getting_started_istio/</guid>
      <description>前两天Istio正式发布1.2版本，至此，Istio社区再次回归每3个月一个大版本+每月一个小版本更新的传统。从Istio1.0发布以来，社区在对改进Istio的一些非功能性的需求（例如性能与扩展性）方面的努力是大家有目共睹的。我觉得是时候写一篇通俗易懂的Istio入门文章，让更多的人去体验一下Istio在云时代所带来的各种益处。
为什么需要Istio 说到Istio，就不得不提到另外一个名词：Service Mesh，中文名为服务网格。
相信很多人对于传统的单体应用以及它所面临的问题很熟悉，一种显而易见的方案是将其分解为多个微服务。这确实能简化微服务的开发，但是不得不说，也带来非常多的挑战，比如对于成百上千的微服务的通信、监控以及安全性的管理并不是一件简单的事。目前为止，针对这些问题确实有一些解决方案（比如Spring Cloud），但基本都是通过类似于类库或者定制化脚本的方式将为服务串联在一起，附带很高的维护升级成本。
Service Mesh的出现正是为了解决这一问题。它是位于底层网络与上层服务之间的一层基础设施，提供了一种透明的、与编程语言无关的方式，使网络配置、安全配置以及遥测等操作能够灵活而简便地实现自动化。从本质上说，它解耦了服务的开发与运维工作。如果你是一名开发者，那么部署升级服务的时候不需要担心这些操作会对整个分布式系统带来哪些运维层面的影响；与之对应，如果你是运维人员，那么也可以放心大胆的服务之间的运维结构进行变更，而不需要修改服务的源代码。
而Istio真正地将Service Mesh的概念发扬光大。它创新性地将控制平面（Control Plane）与数据平面（Data Plane）解耦，通过独立的控制平面可以对Mesh获得全局性的可观测性（Observability）和可控制性（Controllability），从而让Service Mesh有机会上升到平台的高度，这对于对于希望提供面向微服务架构基础设施的厂商，或是企业内部需要赋能业务团队的平台部门都具有相当大的吸引力。
为什么会需要这样的设计呢？
我们先来看一个单独的一个微服务，正常情况下不管单个微服务部署在一个物理机上，亦或一个容器里，甚至一个k8s的pod里面，它的基本数据流向不外乎所有的Inbound流量作为实际业务逻辑的输入，经过微服务处理的输出作为Outbound流量：
随着应用的衍进与扩展，微服务的数量快速增长，整个分布式系统变得“失控”，没有一种通用可行的方案来监控、跟踪这些独立、自治、松耦合的微服务组件的通信；对于服务发现和负载均衡，虽说像k8s这样的平台提供了通过kube-proxy下发iptables规则来实现的基本的服务发现和转发能力，不能满足高并发应用下的高级的服务特性；至于更加复杂的熔断、限流、降级等需求，看起来不通过应用侵入式编程几乎不可能实现。
但是，真的是这样吗？我们来换一个思路，想象一下，如果我们在部署微服务的同时部署一个sidecar，这个sidecar充当代理的功能，它会拦截所有流向微服务业务逻辑的流量，做一些预处理（解包然后抽取、添加或者修改特定字段再封包）之后在将流量转发给微服务，微服务处理的输出也要经过sidecar拦截做一些后处理（解包然后抽取、删除或者修改特定字段再封包），最后将流量分发给外部：
随着微服务数量的增长，整个分布式应用看起来类似于这样，可以看到所有的sidecar接管了微服务之间通信的流量：
这样的架构也有问题，数量少的情况下，sidecar的配置简单，我们可以简单应对，但是sidecar的数量会随着微服务的数量不断增长，sidecar需要又一个能集中管理控制模块根据整个分布式系统的架构变动动态下发sidecar配置，这里我们把随着分布式应用一起部署的sidecar成为数据平面（Data Plane），而集中是的管理模块成为控制平面（Control Plane）。现在整个架构看起来会像是这样：
Istio架构设计 让我们再次简化一下上面的架构设计，这次我们将关注点放在数据平面里两个部署sidecar的微服务中，它们之间通信的所有流量都要被sidecar拦截，经过预处理之后转发给对应的应用逻辑：
这基本就是Istio的设计原型，只不过Istio默认使用Envoy作为sidecar代理（Istio利用了Envoy内建的大量特性，例如服务发现与负载均衡、流量拆分、故障注入、熔断器以及分阶段发布等功能），而在控制层面Istio也分为四个主要模块：
 Pilot: 为Envoy sidecar提供服务发现功能，为智能路由（例如A/B测试、金丝雀部署等）和弹性（超时、重试、熔断器等）提供流量管理功能；它将控制流量行为的高级路由规则转换为特定于Envoy的配置，并在运行时将它们传播到sidecar；
 Mixer: 负责在服务网格上执行访问控制和使用策略，并从Envoy代理和其他服务收集遥测数据；代理提取请求级属性，发送到Mixer进行评估；
 Citadel: 通过内置身份和凭证管理赋能强大的服务间和最终用户身份验证；可用于升级服务网格中未加密的流量，并为运维人员提供基于服务标识而不是网络控制的强制执行策略的能力；
 Galley: 用来验证用户编写的Istio API配置；未来的版本中Galley将接管Istio获取配置、 处理和分配组件的顶级责任，从而将其他的Istio组件与从底层平台（例如Kubernetes）获取用户配置的细节中隔离开来；
  最终，Istio的架构设计如下图所示：
Istio快速上手 部署Istio控制平面
 Note: Istio可以用来运行在多种不同的环境里面，包括Kubernetes、Docker、Consul甚至BareMental（物理机上），文本以Kubernetes环境为例来演示Istio的多种特性。
 在部署使用Istio之前，我们需要准备一个Kubernetes的环境，如果只是试用Istio的话，推荐试用Minikube或者Kind来快速搭建Kubernetes环境。
有了Kubernetes环境并且配置好kubectl之后，我们就可以正式开始了。
 下载并解压最新的Istio发布版本（截至发布本文时的最新Istio版为为1.2.0）
 root@mcdev1:~# curl -L https://git.io/getLatestIstio | ISTIO_VERSION=1.2.0 sh - % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 100 2140 100 2140 0 0 1787 0 0:00:01 0:00:01 --:--:-- 1787 Downloading istio-1.</description>
    </item>
    
    <item>
      <title>MacBookPro开启HiDPI</title>
      <link>https://morven.life/posts/enable_hidpi_for_external_monitor/</link>
      <pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://morven.life/posts/enable_hidpi_for_external_monitor/</guid>
      <description>上周旧笔记本（2015-Mid MacBookPro）由于自己的疏忽导致背包内水杯漏水而浸液，基本无法使用。因为是主力机，所以无奈只能硬着头皮换了最新款的MacBookPro（2018-Mid）。不换不知道，原本以为很快的数据和配置迁移消耗了我一整晚的时间。可能是因为近些年来苹果品控的下降，对于最新MacBookPro没多少好感，拿到新本后令人发狂的蝶式键盘加上鸡肋的TouchBar，让新旧本之间的过渡期再次延长，于是决定还是继续使用外接键盘和鼠标，并将自己之前的显示器作为主显示器。
将外接显示器连接上之后，很快就会发现整体显示模糊，即使作为4K的显示屏也不能达到期望的Retina效果。其实原因也很简单，没有开启HiDPI。
HiDPI 何为HiDPI
我们知道，高分辨率意味着更小的字体和图标，而HiDPI可以用软件的方式实现单位面积内的高密度像素。通过开启HiDPI渲染，可以在保证分辨率不变的情况下，使得字体和图标变大。所以，总结一下就是：
高PPI(硬件) + HiDPI渲染(软件) = 更细腻的显示效果(Retina)  如何开启HiDPI
关于如何开启HiDPI，Google搜索之后会有很多方案，但是因为系统的不断升级，有的不够全面，有的过于繁琐。在此针对我目前的笔记本（MacBookPro 2018-Mid）给出一个相对简洁的方案。主要包含三个步骤：
 关闭SIP 终端命令 开启SIP  接下来一一详细介绍。
备份 实际的操作的过程会更改部分系统文件，因此在操作前要确保对文件进行备份：
 打开终端并进入到/System/Library/Displays/Contents/Resources 拷贝Overrides文件夹到其他目录一份  关闭SIP  Note: 关闭SIP有风险，确保所有操作完整之后再次打开SIP，否则对系统文件的保护将不存在
  打开终端并输入csrutil status，如果结果为enabled则表明SIP为开启状态 关机之后再按电源键后长按command + R直至出现苹果LOGO 在Utils-&amp;gt;Terminal打开终端，并输入csrutil disable，之后关掉终端 重启并正常开机 打开终端并输入csrutil status，确保结果是disable  运行设置脚本  Note: 为了简化配置过程，我们使用自动脚本来开启HiDPI，如果想手动来配置，请访问：https://comsysto.github.io/Display-Override-PropertyList-File-Parser-and-Generator-with-HiDPI-Support-For-Scaled-Resolutions/
  输入curl -o ~/enable-HiDPI.sh https://raw.githubusercontent.com/syscl/Enable-HiDPI-OSX/master/enable-HiDPI.sh 输入chmod +x ~/enable-HiDPI.sh 输入~/enable-HiDPI.sh 输入你想设置的分辨率比如1920x1080   Note: 设置分辨率的时候请务必使用x(乘号)，不能使用*(星号)
 开启SIP  关机之后再次按电源键开机，并长按Command + R直至出现苹果LOGO 在Utils-&amp;gt;Terminal打开终端，并输入csrutil enable之后关掉终端 重启并正常开机 打开终端并输入csrutil status，确保结果是enable  使用RDM切换分辨率 RDM是一个用来切换分辨率的开源软件，使用方法也很简单，其中带⚡️标志的才是开启了HiDPI的分辨率。</description>
    </item>
    
    <item>
      <title>创建最小Docker镜像</title>
      <link>https://morven.life/posts/build_the_smallest_possible_docker_image/</link>
      <pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://morven.life/posts/build_the_smallest_possible_docker_image/</guid>
      <description>如果你熟悉docker，你可能知道docker镜像存储使用Union FS分层存储技术。在构建一个docker镜像时，会一层一层构建，前一层是后一层的基础，每一层构建完成之后就不会再改变。正是因为这一点，我们在构建docker镜像的时候，要特别小心，每一层尽量只包含需要的东西，构建应用额外的东西尽量在构建结束的时候删除。举例来说，比如你在构建一个go写的简单web应用程序的时候，原则上只需要一个go编译出来的binary，没有必要保留构建的工具以及环境。
docker官方提供了一个特殊的空镜像scratch,使用这个镜像意味着我们不需要任何的已有镜像为基础，直接将我们自定义的指令作为镜像的第一层。
FROM scratch ...  实际上，我们可以创建自己的scratch镜像：
tar cv --files-from /dev/null | docker import - scratch  那么，问题来了，我们可以使用scratch镜像为基础制作哪些镜像呢？答案是所有不需要任何依赖库的可执行文件都可以放到以scratch为基础镜像来制作。具体来说，对于linux下静态编译的程序来说，并不需要操作系统提供的运行时支持，所有需要的一切都已经在可执行文件中包含了，比如使用go语言开发的很多应用会使用直接FROM scratch的方式制作镜像，这样最终的镜像体积非常小。
下面是一个简单的go语言开发的web程序代码：
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;net/http&amp;quot; ) func main() { http.HandleFunc(&amp;quot;/&amp;quot;, func(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, &amp;quot;Hello, you&#39;ve requested: %s\n&amp;quot;, r.URL.Path) }) http.ListenAndServe(&amp;quot;:80&amp;quot;, nil) }  我们可以使用go build来编译此程序，并以scratch为基础制作docker镜像，dockerfile如下：
FROM scratch ADD helloworld / CMD [&amp;quot;/helloworld&amp;quot;]  接下来开始编译并构建docker镜像：
mc@mcmbp:~/gocode/src/hello# go build -o helloworld mc@mcmbp:~/gocode/src/hello# docker build -t helloworld .</description>
    </item>
    
    <item>
      <title>重拾少年时期的「信仰」</title>
      <link>https://morven.life/posts/the_summary_of_2018/</link>
      <pubDate>Fri, 28 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://morven.life/posts/the_summary_of_2018/</guid>
      <description>不必太纠结于当下，也不必太忧虑未来，当你经历过一些事情的时候，眼前的风景已经和从前不一样了。
 窗外的霓虹灯让我有点儿走神，在下高铁回家的出租车上，我被出租车司机套路了年龄。本来以为他会说看起来这么年轻之类的客套话，但是他接下来说的话让我有点儿猝不及防！
 快三十岁的人了，该娶媳妇儿了！
 我一时不知道该怎么回复，陷入了沉思。我到底还年轻吗？这个问题也许在半年前我会毫不犹豫的回答，我当然年轻，我还没有闯出什么名堂，怎么可能变老呢？但是现在呢？我有点儿心虚！出租车在一路飘红的二环边上缓缓挪动，走走停停，恍恍惚惚中，我的大脑开始闪现那个我难以接受的事实：我真的老了。
一直以来，作为最小的，我一直拥有简单的信仰，就是去做一个优秀的人，让所有人夸赞；我有自己的“偶像”，追赶成为他的步伐甚至成了我少年时期的生活主旋律。虽然及其功利的信仰不值一提，真是肤浅至极，但是日子过得很纯粹，为因为小小的成就而高兴好几天，也会为偶然的失利懊恼而睡不着觉。总之就是时刻想证明自己，所有的这一切感觉都是理所当然，心中时刻提醒自己不要辜负每个关心自己的人，无暇思考为什么！
然而，成长就是一个摸石头过河的过程，尤其对于我这个出身普通家庭的人来说。一路磕磕绊绊，我开始质问为什么大人们都在做自己认为不对的事情而心照不宣，到底是该回归初心还是随波水流？俨然，少年时的单纯开始出现裂痕，天平开始向另外一端倾斜，甚至开始影响自己的日常生活，在人生的重要十字路口开始犹犹豫豫，不知所措！这个时候我多么希望有看穿一切的长者给我指导？然而，这场源自于内心的混乱，终究只能在内心寻找答案。有时候连续好几个月，我在想如果不离开自己这种舒适的环境，如果不能给自己规划未来的出路，我就无法成为自己欣赏的人。然而自己终究没有那种魄力，有时候这样的纠结让我几度抑郁，同时也时刻提醒自己，简简单单无心无肺不也挺好！
我其实很清楚这种执念会将自己带完何处？固执，腐败，糜烂！我要放下哪些愚蠢的想法，重新认识自己，不去思考为什么？踏踏实实做好每一件事情，享受小成就带给自己的快感。虽然我又一次以为我找到了事物的真相，但是在这个片刻，我似乎看大了少年时代的自己，我是心满意足的。
所以最终2018年的年底，我要结束了这种纠结的状态，把自己重新放到“野外”，用一种新的视角去看自己，看世界。去按照自己希望的方式，改造自己，做一次升级。
因此，在2019年，我要更高效的提升自己的能力，做更多具备稀缺性和自我认同的事情，重拾少年时期的「信仰」！</description>
    </item>
    
    <item>
      <title>又是冬至日</title>
      <link>https://morven.life/posts/thoughts_in_winter_solstice/</link>
      <pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://morven.life/posts/thoughts_in_winter_solstice/</guid>
      <description>冬至已到，也该向2017告别了。
最近时常酝酿着写写2017年，但到真正提笔的时候却无从下手。2017年，我一直很努力，却总是停留在原地。该离开的终究没有留下来，该坚持的还是半途而废。
2017发生了很多事，心情一直处于低谷，时常在深邃的夜晚开始怀疑自己当初的选择。理想、信念和情感&amp;hellip;所有种种陪伴了自己青春岁月的精神支撑，在这冰冷冷的，麻木的，毫无人性的现实世界里显得沧桑而无力。可能是自己过于“玻璃心”，也经常被家人评价“不成熟”的标签。
不是我无法承受现实世界的洗礼，我只是想按照自己的方式来生活。仔细想想，这些年虽然变化不少，但自己始终是个理想主义斗士。
以前的我有自己的原则，却没有太多的阅历，此外，行动力也不太够，但是仍然对这个世界充满向往。 而现在的我，却因为短期内见过太多社会的黑暗面，变得无法坚持自己的信念而变得愤世嫉俗，因为我内心的良知让我无法和这个有美好也有丑陋的世界和解。
我在无数个夜晚想象着自己回到过去，用纯粹的对世界的热情感染早已麻木的自己，提醒自己世界上还有正义，原则还有信念等一众美好的东西。
我也想拥有一台时光机器，回到过去。用自己的经历和行动力，告诫尚处于十字路口的自己坚定自己正确的选择。而不是在理想的分崩离析中不断回味那些外表逐渐模糊但内在却深入骨髓而不能磨灭的印记。
不管2017年对我来说是多么tough的一年，毫无疑问，它也将会成为我永远都铭记和感恩的一年。
希望在即将到来的2018年里，不要再掉进自己思想的漩涡里，重新拿回了生活的主导权，不忘初心，坚持梦想。
  人生几回仿往事，山形依旧枕寒流。 ——刘禹锡《西塞山怀志》   </description>
    </item>
    
    <item>
      <title>十年，火影</title>
      <link>https://morven.life/posts/ten-years-for-naruto/</link>
      <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://morven.life/posts/ten-years-for-naruto/</guid>
      <description>去年听到火影忍者漫画完结的时候，心里是极其复杂的。急于见证万年吊车尾主人公鸣人的结局，却更多地是对于十年青春陪伴的不舍。
第一次见到火影是一个黄头发中二少年踩着树杈飞来飞去，身后跟着几个小屁孩嘴里大叫着佐助。当时觉得这种需要按着牛顿棺材板才能看的动漫实在无聊，但是正值高中紧张复习期间，偶尔用MP4从同学那里拷几集看来缓减一下压力。
对火影路转粉应该是在“复制忍者”旗木卡卡西与原雾隐村“忍刀七人众”之一桃地再不斩天桥决战。当时和几个小伙伴周末躲在教室偷用多媒体反复播放那几集，俨然被各种各样的结印手势以及高潮迭起的热血剧情吸引得神魂颠倒。一方是年仅12岁时就成为上忍木叶天才旗木卡卡西，加上可以复制了上千种忍术的开挂写轮眼；另一方是雾隐村“忍刀七人众”之一，无声杀人术技巧之高超的“鬼人”桃地再不斩。两人实力相近，却有着不同的目标，经过几番焦灼战斗，最后在漫天的飞雪中，当再不斩死在白的身边时，流着泪说道：“如果可以的话，真想和你去同一个地方。”，而与此同时，一颗雪花的结晶则因为白刚刚死去时残留的体温而在白的眼角融化流下，仿佛印证了再不斩那句“白，是你在哭泣么？”，再配上背景音乐——钢琴版“Sadness and Sorrow”，​最终，这成为火影里最初也是最让人感动以及震撼的画面。
其实，火影的战斗场景非常丰富，除了高速飞行和冲刺、拳脚过招、立体镜头、火焰爆发等，还会有很多战斗的细节与伏笔。超燃的热血剧情加上富有逻辑性的战斗场景设计完全让高中时期的我们进入了节奏。随着剧情的展开，久而久之，开始对“万年吊车尾”鸣人的未来越来越感兴趣。漩涡鸣人，见证了白心甘情愿为再不斩牺牲，感同身受地与我爱罗诉说着相同的过去，将佐助视为最重要的羁绊，为了对小樱的承诺，拼尽全力追回佐助，独自练习着更强的忍术，为自己的父母深深地感到骄傲，更想用爱感化九尾，他所经历的一切，都为他贯彻自己的忍道。正是印证了鼬所说的“不是当上火影的人才能得到认可，只有得到大家的认可才能当上火影”。
其实不止主人公，火影里面每个人物都是栩栩如生。 实力又神秘，帅气又低调，漫不经心又可靠，冷酷中还有温暖的天才忍者旗木卡卡西。 高冷而睿智，隐秘而伟大，残忍却温柔，怀揣光明于黑暗中独自行走的最完美忍者宇智波鼬。 猥琐好色而真性情，荒诞不羁却坚韧刚强，洒脱随和而正气凛然，推动整个火影进程的自来也老师。 &amp;hellip;
我想火影完结对我来说不是件过于悲伤的事，尽管那天听到消息的我真的有种不可填补的缺失感，但是关于鸣人的故事暂时告一段落，但新的故事还在延续，更何况我们还有高梨康治大师级的音乐。每个人都有自己的人生，无论振作拼搏，还是颓废懈怠，时间终会带走一切，我们能留下的，只是种子，就像火影的种子早已埋在心底，何时发芽？也许明天，也许……就是现在。</description>
    </item>
    
    <item>
      <title>毕业这两年</title>
      <link>https://morven.life/posts/the-two-years/</link>
      <pubDate>Tue, 20 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://morven.life/posts/the-two-years/</guid>
      <description>步入6月，一场青春的盛宴，如期而至，这场盛宴的主题，是毕业。我虽早已是这场盛宴之外的人，但看到微博上在校同学们的种种分享，仿佛是在提醒自己：WTF, 你都毕业两年了！
是啊，我毕业都两年了！
想到这个，心中难免感慨万千，但是要谈谈这万千感慨，却又不知从何说起，真有一种情深而何以往之的感觉！
毕业这两年，让我渐渐感到陌生的，是自己。我似乎已经越来越不清楚自己是谁，越来越不知道该往何方。我时而追忆大学时代的那个自己，以寻求一点自我的慰藉。当慰藉醒来，我梦让发现，和过去的自己相比，我此时整个的生命轨迹，正在下陷。
大学时的那个我，总得而言，是一个乐于奉献、敢于担当的人。从大一入学之处欢呼雀跃，奔走于各个社团之间，到研究生逃离实验室，和几个“疯狂的哥们儿”整天呆在破烂不堪的写字楼里创业，那时候感觉自己还能“输得起”，所以做什么事情都不惧困难，在别人看来那是“不务正业”，自己却乐此不彼。
但是从毕业到现在的这两年的经历，显然让我感觉到自己正处于人生的低谷。当然，并不是我现在的处境有多么的不堪，而是精神上“斗志泯灭”。回头看看那个曾经有着纯高理想追求，并定会为之奋斗的自己，如今正处于一种“望风披靡”，追求“息事宁人”的状态。
毕业这两年，我一直就职于同一家公司，两年前的今天，我期待着可以顺风顺水地“大干一番”，毕竟公司肯定期待纯粹的技术出生，坚持技术路线的新鲜血液。的确，我投入了极大的热情，也获得了良好的发展。但是由于某种原因，公司一直处于”不稳定期“，自己也努力适应公司公司的转变策略。这样的好处是很明显的，经过几次的变化，虽然职位再三调整，但自己已经适应公司工作环境，也接触了目前各个产品线上的研发同事，合作也非常愉快，显然，公司需要这样能跟着公司战略转变的员工。然而，经过几轮的变化，自己心态早已从之前的“主动学习”，“积极探索”转变到“随波追流”，追求“完成自己分内工作就行”。我不知道这种变化是一种普遍现象，还是我自己开始濒临堕落边缘。
对工作没有了开始时的热情，问题到底处在哪里？整个而言，我现在仍然处于一个迷茫期，前路漫漫，不知所以。
虽然很多的事还没有想清楚，但并不意味着活得糊涂。我这两年虽然让自己的一些有点沉寂了，但是很多东西，我依然在坚持。坚持对善的向往，坚持对独立人格的向往，坚持读书学习思考，时刻保持着对人生观与价值观的自信。暂时得不到太多，只能好好坚持一些自认为可贵的东西，唯有坚持，才有改变的可能。</description>
    </item>
    
    <item>
      <title>后会无期，2016</title>
      <link>https://morven.life/posts/farewell-2016/</link>
      <pubDate>Sun, 18 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://morven.life/posts/farewell-2016/</guid>
      <description> 2016年，很长又很短。 大学毕业，拼命折腾。 概括起来，三言两语便是全部，往细里谈，三天三夜也不够。 但我还是要写，有些情感，只能用文字表达，有些思考，在笔尖之下才会刻骨铭心。
生活 从参加工作到现在，差不多一年多了。这期间的大部分时间我都一个人住着。每天早上睡到自然醒，洗脸刷牙，心情好楼下买个早点，然后悠哉悠哉地走到公司。下班不用急着回家，独自呆在电脑前听听歌，看看书。肚子饿的时候去公司周围吃个晚饭，然后沿着公园慢慢哟哟地走回家，天气好的话去公园旁边的球场打打球。回到家后，洗完澡看看书，刷会儿知乎，偶尔来个葛优瘫追追美剧。平时要是有人约个饭局的话就跟几个关系不错的哥们儿一起吃个饭，然后各回各家。
我这人不太合群，不喜欢热闹。除了碍于情面上的应酬，大多时候我都喜欢一个人呆着。我比较享受这种独自生活的状态。看书，听歌，看电影，玩手机，或者沏一杯茶然后发呆愣神的呆着，我都很喜欢。下半年开始，星巴克成为我出没的第三场所-公司、家之外最好的选择。经常在星巴克看到聋哑人的聚会，围成一桌用手语沟通，还看到过织毛衣的女人，都觉得蛮温暖的。我有时会点杯喝的打开笔电戴着耳机一坐一下午甚至一整天。我始终都觉得，只有当一个人的时候，才能听到自己内心的声音，才有一个好的状态去想明白一些事情。外界纷扰反而会容易让人失去判断和自我意识。
工作 一直在思考，自己到底适合做什么样的开发岗位。从大学本科阶段的被动接受计算机知识的阶段，到研究生期间主动涉猎计算机各方面知识，从最初的汇编语言与C，到面向对象语言，再到函数式编程，从小型单片机与操作系统到大型分布式系统缓存／并发的设计与实现。我一直没有停止学习，总想着扩展自己的技术栈，打造枝繁叶茂的技能树，却没有沉下心去专攻某项技能。总关注于横向领域的扩充，却忽略技能纵向深度的延伸。
从这方面来讲，2016年确实是等待以及转身的重要节点。因为经历多次工作角色的转变，终于找到最适合自己的工作方向。说实话，之前没有想过自己会从事前端开发，毕竟发展速度太快，每天都有新的轮子出现，难免不会迷失在其中。但是真正接过这个角色之后，就不要想那么多，我才27岁又不是72岁，既然入了这一行，就要有这一行的“匠人”精神。说实话，我一直也没认为IT这一行多么了不起，我们从事这一行只不过是个普通的“手艺人”，经历多年打磨自己的大脑，只有足够优秀才能制作出好的作品。但也正是因为如此，我们可以尽情发挥自己的创意。
从2016年4月开始，开始弥补自己前段领域的空白：从HTML到Jade，从CSS到Less／Sass，从Javascript到Typescript，从jQuery到Angular，从Grunt到Webpack&amp;hellip;虽然自己之前也略有涉猎前端知识，但对完整的前端技术栈知识略知皮毛。从最初的简单地写写页面到现在轻松构建整个项目框架，偶尔写个‘轮子’提供产品的个性化需求解决方案。回过头来看，这一年一路走来，发现自己的兴趣所在，沉下心去思考，研究，虽然踩了很多坑，但也收获颇丰。现在大部分人对于前段的认识还停留在‘刀耕火种’的阶段，其实这几年前端领域的快速发展导致前端工程化已经成为不可逆转的趋势。
梦想  我们走再远，终归难违初心所在。
 曾经的自己大部分时间都处于的奋斗的状态，放弃了生活的品质。如今独自生活后才发现，人一定要活在自己的气场里，才能做什么都舒心。埋头做事没什么不可，但久而久之生活里会充斥着现实的土腥味，偶尔跳出来做做自己喜欢的事，会让本就不好过的日子幸福很多。
最基本的作为自己必须培养一些爱好，必须做到一觉醒来清楚至少今天还能干什么。是去球场挥汗如雨？去找个知心老友唠嗑？还是制定一天内该吸收的知识？这些都行，自己必须做到积攒这种微小的期待和快乐，这样才不会被遥不可及的梦和无法掌控的爱给拖垮。
作为产品的创造者，总是梦想着有朝一日能有自己的优秀作品问世，自己设计，自己实现，自己运维。不期待能有成千上万的用户，不奢求能带来万贯的财富。所以，一直保持着一种虚心学习的态度，对自己、对产品。这是一个修炼的过程，若有懈怠或者失去警醒，就会距离创造伟大的产品，愈来愈远。
对2017年的展望 总的来说，2016年对我来说，还算满意。没有忘记自己的初心，也在不断获取想得到的东西，这比迷失自我的成功更难得吧。希望2017年继续保持这种状态，勿骄勿燥。
 多接触移动端开发领域，不管是iOS还是Android 系统学习UI／UX方面的知识 参加些前端以及Design方面的线下聚会 多读些历史人文方面的书籍 保持健康的生活习惯 带着相机出去走走  </description>
    </item>
    
    <item>
      <title>聊聊Pied Pier的压缩算法</title>
      <link>https://morven.life/posts/the_data_compression_in_pied_pier/</link>
      <pubDate>Sat, 18 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://morven.life/posts/the_data_compression_in_pied_pier/</guid>
      <description>最近终于追完了HBO的自制喜剧《硅谷》的第三季。《硅谷》算是一部非常小众的美剧了，主要讲述湾区几个IT男创业的故事，剧情并没有过多围绕他们怎么写代码，而是把关注点聚焦在创业想法的诞生以及初期公司的成立以及与风投斡旋的过程中的戏剧冲突上，让&amp;rdquo;内行人&amp;rdquo;啼笑皆非。每季的后几集都有点儿燃烧，原本“改变世界”之类现实中会被嘲讽的话，却是最能触动内心的！
《硅谷》之所以与众不同，还因为剧中的很多理论都是很值得推敲的。我们今天就来聊一聊《硅谷》S2E08中提出的Pied Pier基础核心算法的“middle-out”数据压缩算法。为了便于理解，我们先来了解一下数据压缩算法的基本原理、“信息熵”以及霍夫曼编码。
数据压缩的原理 数据压缩原理很简单，概括起来就是找到那些重复出现的数据，然后用用更短的符号替代，从而达到缩短数据大小的目的。
例如，我有一段文本&amp;rdquo;ABCDABCDABCDABCDABCDABCD&amp;rdquo;，显然我们使用&amp;rdquo;6ABCD&amp;rdquo;也能替代原来的数据，因为可以根据&amp;rdquo;7ABCD&amp;rdquo;推算出原文本&amp;rdquo;ABCDABCDABCDABCDABCDABCD&amp;rdquo;，数据从原来的“28”byte变成了“5”byte，数据压缩比为“5/24”约等于“20.8”。事实上，只要保证对应关系，可以用任意字符代替那些重复出现的字符串。这让我想到了现在移动互联网时代广泛使用的Emoji，我们可以使用一个简单的Emoji表情来表达原来需要多个字表达的意思。
本质上，所谓&amp;rdquo;压缩&amp;rdquo;就是找出文件数据内容的概率分布，将那些出现概率高的部分代替成更短的形式。所以，内容越是重复的文件，就可以压缩地越小。比如，&amp;rdquo;ABCDABCDABCDABCDABCDABCD&amp;rdquo;可以压缩成&amp;rdquo;6ABCD&amp;rdquo;。与之对应地，如果数据的内容毫无重复，就很难压缩。极端情况就是，遇到那些均匀分布的随机字符串，往往连一个字符都压缩不了。比如，任意排列的10个阿拉伯数字（5271839406），就是无法压缩的；再比如，无理数（比如π）也很难压缩。
总结一下，压缩就是消除冗余的过程，用更精简的形式表达相同的复杂内容。可以想象，压缩过一次以后，文件中的重复字符串将大幅减少。好的压缩算法，可以将冗余降到最低，以至于再也没有办法进一步压缩。所以，压缩已经压缩过的文件（递归压缩），通常是没有意义的。
数据压缩的极限 我们可以从数学上用反证法证明数据压缩是有极限的，也就是不可能无限压缩一份数据而保证内容不丢失。
假定任何文件都可以压缩到N个二进制位以内，那么最多有2N种不同的压缩结果。这就是说，如果有2N+1个文件，必然至少有两个文件会产生同样的压缩结果。这就意味着这两个文件不可能无损地还原。因此，得到证明，并非所有文件都可以压缩到N个二进制位以下。
N是一个基于压缩的数据确定的数字，我们很自然地想知道，这个N到底是多少？
按照我们前面的关于数据压缩的原理，我们知道数据压缩可以分解成两个步骤。
 得到数据内容的概率分布，哪些部分出现的次数多，哪些部分出现的次数少 对数据内容进行编码，用较短的符号替代那些重复出现的部分  对于一封确定的数据文件来说，它的概率分布是确定的，不同的压缩算法主要是因为第二部编码方式的不同，最优的压缩算法，当然是最短的符号表示作为替代原数据内容。
我们使用数学归纳法来来演算一下N的值：
 最简单的情况，我们要压缩的数据只有一部分；这一部分只有两个值，那么一个二进制数就可以表示；这一部分只有三个值，那么就需要两个二进制数来表示；这一部分有n个不同的值，那么就需要&amp;rdquo;log2(n)&amp;ldquo;个二进制位来表示； 假设在数据文件各个字符均匀出现的情况下，一个字符在某一部分中出现的概率是p，也就是说这一部分可能会出现1/p种不同的情况，那么，这一部分就需要至少&amp;rdquo;log2(1/p)&amp;ldquo;个二进制位来表示； 推广开来，如果文件有n个部分组成，每个部分的内容在文件中的出现概率分别为p1、p2、&amp;hellip;pn，那么替代符号占据的二进制最少为下面这个式子：   log2(1/p1) + log2(1/p2) + ... + log2(1/pn)
= ∑ log2(1/pn)
 这就是数据压缩的极限。
信息熵 有了前面得到的数据压缩极限的公式，很容易知道，对于n相等的两个文件，概率p决定了这个式子的大小。p越大，表明文件内容越有规律，压缩后的体积就越小；p越小，表明文件内容越随机，压缩后的体积就越大。
我们将之前的数据压缩的极限公式除以数据的组成部分，既可以得到平均每个符号所占用的二进制位，这样我们就可以很方便的比较不同大小的文件的压缩极限：
 ∑ log2(1/pn)/n
= log2(1/p1)/n + log2(1/p2)/n + ... + log2(1/pn)/n
 更进一步，我们可以得到每个字符所占用的二进制位的数学期望：
 p1*log2(1/p1) + p2*log2(1/p2) + ... + pn*log2(1/pn)
= ∑ pn*log2(1/pn)
= E( log2(1/p) )
 结果是每个字符所占用的二进制位的数学期望等于概率倒数的对数的数学期望。</description>
    </item>
    
    <item>
      <title>写在2015年年末</title>
      <link>https://morven.life/posts/post_at_the_end_of_2015/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://morven.life/posts/post_at_the_end_of_2015/</guid>
      <description> 2015年马上就要过去了。一年一年是如此相似，一年一年却有如此不同。每到年底总想写点什么，算是给自己的一个总结、一个回忆、一个自我述说的快乐。 2015年像很多年份一样是平常的，按部就班地数着日子过去了，虽然忙碌，但收获颇多。2015年又是不平常的，因为2015年是我正式告别学校踏入&amp;rdquo;江湖&amp;rdquo;的第一年。2015年对我来说，关键字有驾证，毕业以及入职。
驾证 之前总是一拖再拖，这次真是没法再推了。于是拉了宿舍一哥们儿入坑，组团报名。银子花出去之后便有了动力。从科目一理论到科目二场地考，再到科目三大路考，每周一到周四5点多爬起来赶班车去驾校练车。中午赶回来吃过饭休息之后再去实验室赶论文。还好，全部都一把过，算是对自己的慰藉吧。那几个月下来，认识了很多学车的同学，大多是即将毕业离开南京的学生，而且还认识了个南艺学珠宝设计的妹子（坏笑&amp;hellip;）。那段日子也确实是痛并快乐着，导致拿到驾照之后得了学车后遗症，每天早上天还没亮就睡不着了。学车本不是什么难事儿，只要安排得到，拿到驾照还是挺容易的，也不用为了考试顺利而铤而走险，贿赂教练或考官。
毕业 又毕业了，这一次是真的毕业了。研究生毕业答辩明显比本科毕业答辩阶段严格得多，所以投入了更多的时间在论文上。庆幸自己有个好导师，选题也不错，所以答辩比较顺利。毕业典礼没有本科那么正式，辅导员只是选了一些同学去参加，毕业合影部分同学的脸也是p上去的。临近毕业那段时间各种手续要办，又是档案又是户口&amp;hellip;不过总能抽出时间和室友开黑。直到离校当晚，拉着行李箱准备走出鼓楼校区，走在广州路熙熙攘攘的人群中才知道，这次不是回家，这次真要离开了，下次再来不知道是什么时候了。
入职 毕业后回家休息不到一个月正式入职。入职前一周收到HR发给我的入职材料列表，发现缺了‘无犯罪记录’证明，当时懵了，因为这材料需要回学校保卫科去办。还好，联系到了在南京的同学和辅导员，虽然麻烦，但还是搞定了。接下来就是正式入职，因为之前也有在IBM 上海Office实习的经历，对IBM的总体情况和公司文化比较了解，所以和同事融入较快。但是计划赶不上变化，我的hiring manager所在的部门研发计划有变，导致不需要太多的dev，所以就被transfer到其他的team，不过这几个team所做的产品相关性非常高，知识技术上稍有不同。IBM西安office主要做的产品是高性能计算相关，主要的核心产品要两款，其他的产品都是作为其add-on。技术的选择上java多一些，在core方面会有C&amp;amp;C++。令我不太满意的地方是，工作中对业务的熟悉程度远大于对技术的熟练上，这可能是大商业公司的通病。
对2016的期待 又到了许愿时间了。要做也要做有梦想的咸鱼～～
 希望能去自己感兴趣的team，做自己感兴趣的事儿。 希望抽出更多的时间看书，学习以及写博客。 希望能多在工作中和外籍同事交流，锻炼自己的口语。 希望坚持体育锻炼，一周跑两次步，周末打一次球。 希望感情能够稳定下来。  </description>
    </item>
    
    <item>
      <title>Dota中的Ban&amp;Pick机制与陪审团</title>
      <link>https://morven.life/posts/ban-pick_in_dota_and_jury/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://morven.life/posts/ban-pick_in_dota_and_jury/</guid>
      <description>Dota(Defense of the Ancients)最初只是由《魔兽争霸3：冰封王座》的一个RPG地图衍变而来，是一款支持多人即时对战的战略游戏。最早的Dota地图则在混乱之治时代就出现了，一位叫做Euls的玩家制作了第一张Dota地图-Roc Dota。随后，经过多个玩家进一步完善，以及IceFrog的多次修正和更新，游戏最终定格为两个阵营，玩家需要操作英雄，通过摧毁对方遗迹建筑来取得最终的胜利。这种多人在线的竞技模式后来被称为“Dota类游戏”，对之后产生的多个竞技类游戏产生了深远的影响。
Ban&amp;amp;Pick机制 如何在比赛中选出一套让比赛的双方都能接受的英雄阵容，同时又要体现出竞技游戏的对抗性和平衡性。一般来说，游戏的对抗性表现为游戏元素的多元化。Dota这款游戏共有102名英雄，有两个阵营各选五名英雄分辨占据近卫和天灾两方，分三路进行对抗。当然五名英雄的职责各不相同，Carry位通常在地图的优势路发育，同时要有清晰的大局观，在比赛的后期发挥主力作用。Solo位，一般在中路对抗，该位置要求选手在中前期有很强的带节奏能力。Ganker，也称为抗压位，游走于各路，配合队友完成击杀对方英雄。剩余的两个位置称为辅助位，主要配合团队控制视野，帮助队友打出优势，从而在战略上压制对方。
假定Dota的英雄完全按照其所处的位置排列，（实战中完全不这样，经常原本12号位的英雄随着版本更迭称为辅助，反之亦然）如此每个位置的英雄也就约20名，如果我们再放弃掉一些不常用的英雄的话，实际让选手能够顺畅选择的英雄其实不过尔尔。这时，如何让场上选手得以公平竞技打出激情，就必须通过一套规则，选出一套让比赛双方均能够接受的阵容，从而增加比赛的观赏性。那么，选手们应当如何选取自己心仪的英雄呢？
Dota的设计者“IceFrog”最终采用了一套&amp;rdquo;Ban&amp;amp;Pick&amp;rdquo;机制，这套机制来源于千年之前一个在法国的英国人的发明。
陪审制 1135年，英国国王亨利一世去世，根据一份协定，英国国王的继承者将由自幼生长在法国的青年亨利二世于1154年担任。亨利二世是一位非常有野心的国王，开创了一个时代，人称“金雀花王朝”。可刚上任的他作为一个“外国人”，只要想在一个地区内树立权威，那么司法权则应当是极为重要的手段之一。在当时，高贵的法国贵族又如何听得懂英格兰的那些土话呢？如果听不懂别人说什么，作为一国之君，又如何来审理民间纠纷以确立自己的声望？亨利二世又能以怎样的方式，设计出一套完美的制度呢？
最开始的时候，每当出现土地方面的诉讼时，会由法院发给争议双方一纸令状(令状或由司法大臣发布)，命令争议双方找来十二名和本案无关的人士在上帝面前发誓之后，做出对案件事实方面的裁决。而亨利二世则带人组成巡回法院，当他巡回到该地之后，对案件做出裁决。毕竟，由自己亲手提拔的大臣是懂法语的，自己审完案子下发，再由手下将其翻译成英语传达，是再好不过的事了。
但是，那十二个与本案无关的人，是怎么选出来的？
陪审员的选择一开始是随机选，而且选的比较多。然后双方会有机会了解备选的人选，并且通过辩论来决定留下谁。当然，双方都会尽量留下对自己有利的陪审员（Pick），主要是根据职业，性别，年龄来判断是否会同情被告。还有几个机会可以不必给出理由而否定某一个陪审员（Ban）。最后确定一个名单。名单上的人就得去了……因为这个是公民义务的一部分，除非有特殊原因，否则必须去，要是故意不去那就要被起诉。同时，还会有几个备用人选，也必须去，以防有人生病或者出事来不了。 还有一个是选择陪审员的时候会尽量避免选择某些职业，比如律师，法学院的学生，老师，教授等等。主要是排除类似“权威”或者习惯教育指导别人的人，以防以一人之力左右整个陪审团的意见。
对Dota来说，情况也正是如此，“IceFrog”必须采取一套制度，让选手们首选去掉那些对自己特别不利的英雄，从而不会让先选英雄的一方率先抢走版本当中最热门也是最厉害的英雄，以降低游戏的对抗程度。说白了，对Dota来说，选手们竞技环境越是公平，游戏的对抗程度越高，游戏的活力也就越持久。
不过这套制度并非一经制定就一成不变，而是会根据玩家不断的反馈与游戏平衡的调整随之改进。Dota的Ban&amp;amp;Pick规则方式的更迭几乎和Dota的游戏版本更迭频率一致。从Dota6.28X版本开始到现在的Dota6.83，每一代版本非但在游戏本身的平衡性上做出了重大调整，在Ban&amp;amp;Pick规则上，&amp;rdquo;IceFrog&amp;rdquo;也从未掉以轻心。不论是Ban&amp;amp;Pick时间还是顺序，甚至于到底Ban掉多少名英雄，也是历经多个版本才最终确立。</description>
    </item>
    
    <item>
      <title>回首「2014」</title>
      <link>https://morven.life/posts/backward_glance_of_2014/</link>
      <pubDate>Fri, 26 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://morven.life/posts/backward_glance_of_2014/</guid>
      <description> 一年将尽，一年伊始，兜兜转转，2014年就这样走近年末，不禁让人措手不及。似乎是一样的时光、一样的节奏、一样的人物，变换着不同的场景、不同的面孔、不同的心情，重重叠叠过去了一年。过去的一年，虽然忙碌，但也收获不少。如果一定要说一些年度关键词，那就是学分与课程、百度实习以及校园招聘。
学分与课程 从去年的9月份到今年的五月初，忙碌的两个学期，选择修完了研究生的大部分课程，这样五月份以后就可以外出实习。总的来看，研究生的课程是本科课程的扩展与深入。比如《高级数据库》这门课，本科也开，所讲内容大部分是数据库基本知识，关系型数据库设计以及SQL语句优化。研究生阶段则更深入，更倾向于数据库读写性能分析，各种关系型数据库横向对比，动手实践特殊类型的数据库设计，当然也包括对非关系型数据库的探讨。其他课程与此类似，包括高级网络，分布式设计与分析，数据挖掘与知识发现等等，基本上覆盖了计算机相关专业的主要课程。也利用研一空闲时间，复习了数据结构和算法，刷LeetCode，填本科阶段挖下的坑。到五月份主要课程都已修完，貌似还多修了两门课。研究生的成绩普遍较高，平均分达到了90分左右（现在才意识到了要好好学习，哈哈～）。研究生阶段还有一门研讨课，不过我选的研讨课自己不是特别感兴趣，所以也没有花太多的时间在上面，水水而已。
百度实习 关于今年的实习，本来想专门写一篇文章总结一下，后来由于找工作忙碌就搁置了（其实都是借口），这里就简单总结一下。今年5月份拿到百度网页搜索部的实习Offer，之前听说百度实习基本能留下正式工作，但是当时选择去百度实习的原因不是想拿百度的正式Offer，而是想去体验一下国内顶级的互联网公司，同时也增加自己的项目经验，为下半年的找工作打下基础。 先说说面试吧，百度的实习面试分为两轮技术面，HR都会跟你预约面试时间，这一点还是非常赞的。第一轮面试的大部分是基础数据结构与算法，当然也问了一些关于C++的问题，比较轻松。第二轮面试就比较开放了，当时我的面试官就是后来我实习的mentor，问题不是特别多，第一个是操作系统内存管理的，接下来，问了我对于Mysql的认识，包括mysql读写极限的多少，以及底层一些读写机制等等，最后就是一道算法题，自己回答的不是很好。不过还好，大约一周以后，就收到了Offer。 5月初正式入职，在百度网页搜索部，我所在的team在上海Office有4个DEV，主要负责抓取工作，包括百度搜索的抓取以及其他各个产品线的抓取。百度为了规范公司各个产品线的抓取，避免不必要的封禁和抓取混乱的现状，特意将抓取平台化，命名为CSPUB，公司内部各个产品线可以在CSPUB上注册，编辑抓取目标然后发起抓取。主要的开发语言是C++和PHP，自己平时也用Python写一些脚本检测线上机器的运行状况。百度确实是个年轻有活力的公司，内部员工干活都很积极，对新技术热情很高，部门内部经常会有一些技术分享，可以学到不少在学校根本不会接触到的架构知识。我的mentor是个对工作效率追求极致的人，一度使我感觉跟不上节奏，后来习惯了之后才发现自己受益颇多。到了8月份，由于开始找工作，自己也没有留上海的想法，遂辞职，返校找工作。
校园招聘 今年最重要的事情应该就是找工作了，可就是这最重要的事儿，我却刚开始就错过了一次绝佳的机会－阿里校招。不过阿里今年的校招也是让人不能理解，9月份之前就开始笔试，而且是线上笔试。我笔试当天晚上才得知消息，为时已晚。不过我对于自己在哪里工作找已有想法，因为女朋友的缘故，我会优先选择回西安工作。所以，当周围的同学都在准备BAT面试的时候，我在关注西安为数不多的IT公司校招情况。机缘巧合，之前发给IBM西安office HR的简历被筛选了，HR安排我去公司笔试和面试。接下来的一周我在西安参加了笔试一次面试三次，虽然HR说十一之后才会有消息，但当时感觉应该十拿九稳了。不出意料，回到南京之后，面试Manager通过电话给了口头offer，薪水比想象的要高，再加上之前有在IBM的实习经历，应聘职位也和自己的方向比较相关，再次考虑到在西安IT行业不景气的现状，所以也基本定下来了。当然，这时候还没到十月份，校招才刚开始，所以也准备了其他公司的笔试面试，包括百度，大众点评以及一些小公司。其中百度和大众点评都拿到Offer。在西安呆的一周内错过了腾讯，美团的校招。进入11月份基本周围同学都拿到Offer，校招也应该结束了。 总的来说，校招没必要很纠结，没必要各个公司招聘都参加，那要只会心力交瘁。想清楚自己适合什么样的公司，决定去哪个城市发展，这样自己目标就明确多了，准备起来也有条不紊，自然结果也不会很差。
新一年的愿望 希望将愿望写出来，能够更加有动力去实现。
 希望抓住最后的校园时光，感谢所有的老师，和最好的哥们儿好好告别。 希望公司入职能去好的team，找到nice的mentor，做自己想做的事情。 希望能抽出更多的时间看书，不管是技术方面的书籍还是人文历史方面的。 希望能学点设计方面的知识，尤其是UI，UX方面的。 希望在工作中锻炼自己的口语，再不要吃老本。 希望多多参与开源的项目，保持博客更新的频率。 希望能多陪陪家人出去旅游&amp;hellip;  </description>
    </item>
    
    <item>
      <title>IBM实习总结</title>
      <link>https://morven.life/posts/internship-at-ibm/</link>
      <pubDate>Mon, 01 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://morven.life/posts/internship-at-ibm/</guid>
      <description>今天上午和新来的实习生交接了自己的工作，中午约同事们一起吃了午饭，之后很快办完了离职手续，自己为期6个多月的IBM实习也画上了句号，不管是不是完美，对于我自己来说，大学四年的第一份实习无疑对我价值颇高。这篇文章我主要说说我在IBM实习的经历以及感受。
实习时间 我出去实习的时间比较晚，根据学院规定暑假就可以开实习，时间不能少于6个月，所以最好应该在4，5月份找实习，而我在4，5月份却忙于备考GRE和Toefl，自然也错过了找实习的黄金时间。暑假结束后，我才开始计划找实习。开始一心想着去互联网公司，也正因为一直在等待这样的机会而浪费了不少时间。直达9月份，刷小百合看到一个不错的实习机会，也就是接下来6个多月我所在的IBM JTC部门。当时心动的主要原因是这个实习职位所在的Team是做JVM的，也是自己的兴趣方向所在，所以果断投了简历。
面试 IBM的面试分为技术面和英文面，可能当时急缺实习生，所以面试安排得很紧凑。自己也比较幸运，因为Team里有已经毕业的学长Ray，多少会有加分：）。因为是JVM小组，所以技术面都是关于Java的，比如Java多线程，IO，容器类以及反射机制等，没有问算法题。现在回想起来，这些知识确实在每天的实习工作中都会有所接触。接下来是英文面，主要面试口语。因为是招聘实习生，所以也没有太高的要求，基本的听说读写熟练就没有问题。最后面试官问我有没有问题想问他的，我进一步问了关于实习职位的工作内容，当时的面试官，也就是后来我的mentor Sanhong，人非常nice，blabla&amp;hellip;讲了一大堆，虽然当时也不是很懂，但真心觉得很NB。过了一个周左右，收到面试通过的邮件，几天后搭乘了去上海的动车，开始了我的IBM实习。
工作环境 IBM的工作环境很不错，整个办公室是个很大的开放式的环境，整个部门，从部门老大，到Manager，到实习生都在这里工作。我去的时候领到了一台旧电脑，是的，实习生用的都是旧电脑，不多这也完全不影响开发，因为基本的开发测试都是在云端，通过SecureCRT SSH登录到云端Linux。也正是从这开始彻底喜欢上了Unix/Linux哲学： &amp;gt; simple and beautiful &amp;ndash;Wikipedia
对于习惯了IDE的我一开始会有些不适应，不过后来发现在Terminal下工作效率丝毫不逊于IDE。
工作内容 IBM比较注重基础性软件研发，特别在中国成立CDL(China Development Lab)，我所在的部门JTC(Java Technology Center)正式属于CDL，而我所在的小组从事的是JVM的开发。IBM的J9 JVM与Oracle 的Hotspot VM齐名，是两大主流的JVM之一，为IBM许多Java产品提供支持，比如WebSphere，以及一些开源的产品如Apache Harmony。现在我们team的工作是与加拿大以及印度的同事合作，基于J9VM开发Multitennancy JVM，通过在单一的多租户 JVM 中运行多个应用程序，云系统可以加快应用程序的启动时间，并减少其内存占用。这将作为IBM Java8的一个新特性。因为是实习生，所以我的工作大多是于解决Bug，性能调优以及测试相关。我的mentor Sanhong是个技术大牛，人也非常nice，我很庆幸能遇到这样的导师。mentor对我的帮助不仅是技术上的提高，更多的是工作方式的改进，这些东西在学校的绝对学习不到的。
IBM软件过程管理 特别要提到的是IBM的软件过程管理方式，IBM使用敏捷软件开发方式，更具体点儿是Scrum，每两周一次Sprint迭代，每天都会下午选个时间Daily Scrum Meeting，控制在15分钟左右，每个人都必须发言，也包括实习生，向所有成员当面汇报你昨天完成了什么，并且向所有成员承诺你今天要完成什么，同时遇到不能解决的问题也可以提出，每个人回答完成后，要走到黑板前更新自己的 Sprint burn down（Sprint燃尽图）。同时，Team会做到每天至少一个Build，即一个成功编译，可以运行的版本。虽然这些东西在学校也学过，也有实践课程可以体验，但是感觉多少还是是纸上谈兵。如今在算是真正有机会在工作机会中体会Scrum。和其他外企一样，IBM工作语言是英语，虽然平时和同事交流可以用中文，但是邮件以及Message全部都是英文，而且每周一次国际会议也是用英文交流。
总结 在IBM工作，最重要的是团队合作，虽然平时工作的压力不大，实习生见见“世面”是可以的，但如果真要在技术上有所提升，建议IBM和其他类似的外企可以不用去了，可以去百度，阿里这样的互联网公司，对于锻炼自己的技术应该帮助更大。当然，也可以选择一些创业公司，现在正值互联网蓬勃发展的时候，去小型创业公司，自己可以独当一面，项目经验提升也是必然的。当然小型公司也有自己的缺陷，缺少自己的平台，过多利用现有的技术做产品，对于想从事底层操作系统的基础架构的同学就要重新考虑了。 不过总体来说，通过这次的实习经历，我学习到了不少的东西，不只是技术上，更多是关于工作方式以及团队意识。当然，也第一次去魔都体验了码农的生活，将自己在学校学习的知识利用到了实践当中，赚了自己的第一笔钱。</description>
    </item>
    
    <item>
      <title>Big Endian &amp; Little Endian</title>
      <link>https://morven.life/posts/the_story_of_big_and_little_endian/</link>
      <pubDate>Tue, 26 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://morven.life/posts/the_story_of_big_and_little_endian/</guid>
      <description>字节序 谈到字节序，必然要牵扯到两大CPU派系。那就是Motorola的PowerPC系列CPU和Intel的x86系列CPU。PowerPC系列采用big endian方式存储数据，而x86系列则采用little endian方式存储数据。那么究竟什么是big endian，什么又是little endian呢？ 其实Big Endian是指低地址存放最高有效字节（MSB），而Little Endian则是低地址存放最低有效字节（LSB）。 文字说明比较抽象，下面举个例子用图像来说：
Big Endian
 低地址 高地址 -----------------------------------------&amp;gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | 12 | 34 | 56 | 78 | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  Little Endian
 低地址 高地址 -----------------------------------------&amp;gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | 78 | 56 | 34 | 12 | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  从上面两图可以看出，采用Big Endian方式存储数据是符合我们人类的思维习惯的，而Little Endian&amp;hellip; 为什么要注意字节序的问题呢？你可能这么问。当然，如果你写的程序只在单机环境下面运行，并且不和别人的程序打交道，那么你完全可以忽略字节序的存在。但是，如果你的程序要跟别人的程序产生交互呢？在这里我想说说两种语言。C/C++语言编写的程序里数据存储顺序是跟编译平台所在的CPU相关的，而JAVA编写的程序则唯一采用big endian方式来存储数据。试想，如果你用C/C++语言在x86平台下编写的程序跟别人的JAVA程序互通时会产生什么结果？就拿上面的0x12345678来说，你的程序传递给别人的一个数据，将指向0x12345678的指针传给了JAVA程序，由于JAVA采取big endian方式存储数据，很自然的它会将你的数据翻译为0x78563412。什么？竟然变成另外一个数字了？是的，就是这种后果。因此，在你的C程序传给JAVA程序之前有必要进行字节序的转换工作。 无独有偶，所有网络协议也都是采用big endian的方式来传输数据的。所以有时我们也会把big endian方式称之为网络字节序。当两台采用不同字节序的主机通信时，在发送数据之前都必须经过字节序的转换成为网络字节序后再进行传输。ANSI C中提供了下面四个转换字节序的宏。
Big Endian：最高字节在地址最低位，最低字节在地址最高位，依次排列。 Little Endian：最低字节在最低位，最高字节在最高位，反序排列。
Endian指的是当物理上的最小单元比逻辑上的最小单元小时，逻辑到物理的单元排布关系。咱们接触到的物理单元最小都是byte，在通信领域中，这里往往是bit，不过原理也是类似的。
An Example:
如果我们将0x1234abcd写入到以0x0000开始的内存中，则结果为 big-endian little-endian 0x0000 0x12 0xcd 0x0001 0x34 0xab 0x0002 0xab 0x34 0x0003 0xcd 0x12</description>
    </item>
    
  </channel>
</rss>