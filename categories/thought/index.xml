<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>thought on Morven's Life</title><link>https://morven.life/categories/thought/</link><description>Recent content in thought on Morven's Life</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 25 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://morven.life/categories/thought/index.xml" rel="self" type="application/rss+xml"/><item><title>写在「2022」年年末</title><link>https://morven.life/posts/2022-retrospect/</link><pubDate>Sun, 25 Dec 2022 00:00:00 +0000</pubDate><guid>https://morven.life/posts/2022-retrospect/</guid><description>岁月不居，时节如流，转眼间就到了圣诞节了。一般来说每年这时候是比较轻松自在的阶段，然而，面对国内疫情放开后的第一波的冲击，即使再加倍小心，还是中招了。
目前，经过大约一周的休整，身体基本已经恢复到感染前的水平。作为一个没有接种过疫苗的人，希望我与奥密克戎的抗争周期可以供大家参考，希望大家能更多得了解新冠。
第一天，也就是12月20号晚上，开始发烧，但其实早在发烧前几天都伴有轻微头痛眩晕，以为自己没休息好，也就没太在意，直到发烧开始，头痛加剧，到晚上10点钟体温超过39度，心跳急促，辗转一晚几乎没睡着，看着窗外日光变成灯光，灯光变成日光。整晚亲身经历着嗓子如何变得干涩，味觉逐渐退化的过程，这应该是最难熬的一天。 第二天，体温降到38度以下，但由于前一晚基本睡睡醒醒，醒醒睡睡，导致第二天起来之后全身酸痛，头昏脑胀，喉咙痛痒，恶心厌食，主要靠维C泡腾片冲水喝，这一天我足足喝了大约3升左右的水。到了下午左右所有症状开始好转一点儿，于是开始睡觉，醒来时已经到了第二天凌晨5点。 第三天，体温基本恢复正常，头痛也有所缓解，但是腰酸背痛，特别是竖脊肌附近的肌群，同时，喉咙干涩有痰，偶尔咳嗽。稍微有了些胃口，于是自己煮了碗菠菜挂面补充了一下。 第四天，全部症状都有所缓解，但开始干咳不停，味觉慢慢开始恢复，眼睛重新闪烁出光芒。 第五天，偶尔咳嗽，鼻子干涩，但抗原测试还是阳性。
总的来说，如果要我对这次奥密克戎感染的剧烈程度做一个评价的话，我认为它不能简单用一个“大号流感”来形容。这次西安地区主要的流行株是奥密克戎BF.7，它的整个发病过程猛烈但病程短，需要有至少正常的身体来度过真个发病周期，所以这个冬天对于老年人真的是个巨大的挑战。
关于药物的使用，需要按照个人的体质酌情处理。我之前感冒有对药物过敏的先例，于是这次没有使用任何药物，发烧的前两天自己熬制了生姜葱白汤来热饮，效果还可以。最后需要说的是，一旦转阳之后最好身边有人照顾，尤其是发烧阶段，神志不清，万一遇到紧急状况很难处理。
现在奥密克戎的传播能力进化得非常强，基本不靠飞沫，面对面讲话就可能被感染，真是防不胜防，一般的医用外科口罩有些难以抵挡。希望大家尽量不感染，也尽可能晚感染，也许，当我们积累了更多的对付奥密克戎的经验之后，真个发病周期就不需要这么难受了。
总之，2022年以及即将到来的2023年，健康都是重中之重，愿凛冬散尽，星河长明。</description></item><item><title>为什么音乐多是由12个音组成</title><link>https://morven.life/posts/why-12-notes-in-music/</link><pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate><guid>https://morven.life/posts/why-12-notes-in-music/</guid><description>一直有一个疑问困扰着我，为什么大部分音乐都是由12个音组成？当然，为了严谨起见，这里所说的音乐并不包括中国传统音乐中的所谓「五声七音十二律」，但其实十二律和现在主流乐音体系中「十二平均律」是相通的。音乐本就无国界，这是一件相当神奇的事情，另外一个例子是全世界各种族的人类听到大三和弦就会感到很愉悦，一旦将大三和弦的中音降低半个音高就会变成小三和弦，这时候听者往往会感到悲伤。
言归正传，作为一个理科生，我还是想从物理学和一点点生理学的角度来研讨一下为什么现代音乐普遍是由12个音谱成。可能有人就要说了钢琴不是有88个键吗？难道不应该是至少有88个音吗？实际上，但从物理学的角度来看，音高就是音的频率高低，那么可用的音就会无穷无尽。但问题是，音的频率只是区分不同音的一个角度，如果从生理学的角度来看，音的频率反而不是很重要，比如，我们将某音乐作品的所有音都按照固定的比率升高之后演奏，就会发现发出的音乐还是和以前一样和谐。所以说，重要的不是音的频率，而是这些频率之间的音程。当我们从C调切换为D调来演奏《小星星》的时候，会发现它还是《小星星》。旋律本身不是一些列音的组合，而是一些列音程的组合。
由此来看，钢琴上的键虽然很多，但是这些键发出的音都是按照固定的比率分组重复，仔细观察就会发现每个分组都包括12个音，其中包括：
7个自然音：C-D-E-F-G-A-B 5个由自然音变化而来的演化音：C#-D#-F#-G#-A# 这些音的音高关系以及在键盘上的布局如下图所示：
回到上面的问题，为什么会选择这12个音呢？
单从物理学的角度很难回答这个问题，因为音乐本身就是很主观的，之所以选择这12个音是因为经过千万年的演化，大部分人类都认同这12个音以及对应的音程是最和谐悦耳最具音乐性的。说白了就是用这12个音谱成的旋律最适合演奏。
为什么这12个音最适合演奏？
要回答这个问题，就要引出Octave(八度)的概念。钢琴键盘上的所有键是由不同版本的12个音分组组成，我们称之为音组，相邻音组的同名音，我们称之为「八度」。八度是音乐中最和谐最重要的音程，相距八度的音听起来很自洽，它们是相同音的较高或较低表现形式，在乐音体系中称之为Octave Equivalence(八度相等)。从钢琴上看，我们会看到多个A布局在键盘上相邻八度的位置上。而且这种名为八度的音高差异，对应于频率的差异，并非一个固定的赫兹数，而是一个固定的频率比率，该比率为2:1。钢琴中央A音高对应之频率为440Hz，其高八度之A音对应的频率为880Hz；其低八度之A音对应的频率则为220Hz。对于弦乐器，比如吉他，弦长减半，则频率加倍，也就是说弦长一半的音是另一弦的高八度音。
现在世界上主流的音律系统包括西方的十二音律系统（后面会提及）都是首先确定八度，在用各种方式把八度分成不同的音。
这其中把八度分成12个音的方式可以很方便的演奏下面最重要的几个音程：
其中八度音已经介绍过了，我们快速过一下其他音程，然后再看看它们在键盘上的位置。
除了八度音之外被广泛认为最和谐的两个音程是纯五度与纯四度，其实越是和谐的音程，它们组成音的频率越是具备简单的关系，比如八度音的频率比是2:1，而纯五度与纯四度音的频率比分别是3：2与4:3。
注意这里不要混淆了因果，我们并不是因为音频率比简单而选择它们，而是因为音程越和谐，音之间的频率比越简单。这并不是巧合，从物理学的角度来看，两个音的频率比越简单，这两个音的波长就会完美的排列甚至同步。所以说，音频率的完美同步才是这些音程和谐的根本原因。
人们对于八度、纯五度与纯四度之外的其他音程和谐程度的排序会略有不同，然而大部分遵循下面这张图，纵坐标代表和谐程度，每个音程的位置越高代表越和谐：
还是列出这些主要和谐音程的频率比，如下表所示，从表中我们也很容易越和谐的音程其组成音的频率比越简单：
音程 根音的乘阶 频率比 八度 2 2:1 纯五度 1.5 3:2 纯四度 1.33 4:3 大三度 1.25 5:4 小三度 1.2 6:5 大六度 1.6 8:5 小六度 1.66 5:3 除了上表所列的和谐音程之外的剩下音程普遍被认为是不和谐的音程，但这并不代表这些音程没有用，虽然说“不和谐”看起来应该尽量避免使用，但是没有“不和谐”音程的音乐往往缺乏戏剧效果或者悬念，所以在某些电影音乐中经常能见到所谓的“不和谐”音程来增加张弛度，最典型的例子就是诺兰电影御用音乐制作大神汉斯-季默的作品。
这基本上就是现代音乐主要用到的12个音。可能有人又要问了，为什么不能在这些音中间再加入一些音，比如，在小三度与大三度之间加入一个“中三度音”，也可以在大七度与八度之间加入一个所谓的“超七音”，这样，就可以这样划分八度之间的音：
事实上，我们并不能这样加入微分音，因为八度之间的音“几乎”是平均分布的，这方便用乐器演奏不同的调，八度之间的这些标准音几乎是平均排列，如果再加入上面所示的两个微分音，就会打破这种平均的局面。即使要加入更多的音到八度之间，我们也得找到一种既能平均分割八度但又能涵盖上面讲到的各个重要音程（纯五度、纯四度、大三度等）的分割方法。最典型的两种分割方法是：
八度19音 八度24音 这两种分割方法都既保证了平均布局又保证涵盖各个重要音程，历史上，有些音乐家确实使用这些音律系统制作了乐器并演奏作品，比如四分音钢琴，也叫做24音阶钢琴，每个八度中包含24个键。可想而知，加入更多的微分音会让乐器更加难以演奏，而且这些新加入的微分音符大部分不太实用，也就是说不值得加入乐器。
乐器的设计必须在易用性和演奏更多音之间找到平衡。
几个世纪以来人们经过各种实践得出的结论是，八度12音是这种最优解，它是演奏最和谐和最有用音程的最佳组合方式。有了八度12音，依次增减排列就可以得到钢琴的所有键。
到这里，我们最初的问题似乎得到了解答。
但是，等等&amp;hellip;
还有个问题，之前留了一个“坑”，我们提到过上面这种按照简单频率比来划分八度方式得到的12音的布局“几乎”是平均排列但并不是“严格”平均排列，这会不会造成其他的麻烦呢？
要回答此问题？需要介绍新的概念 - 律制
上面介绍的这种律制一般称之为均律，音程按照完美的频率比布局。但是即使是最简单最完美的频率比布局，也会到来其他的问题。因为乐器如果要按照不同的调演奏作品，音就需要尽可能平局排列，所以即使均律12音间隔近似相等，但并不是完美平均排列。
由此带来的问题是，换调演奏同一作品时，根音也跟着发生变化，所以就需要重新调律，但是调律之后就会发生“跑调”的问题。比如A-E之间是完美的3:2关系，所以如果用A大调来演奏音乐听起来会非常悦耳，但是如果在其他调演奏同一音乐，比如Eb大调，听起来就会很不和谐。原因是，虽然A-E的纯五度是完美的3:2关系，但是Eb-Bb的纯五度并不是3:2关系。
那么，怎么解决这个问题呢？答案是12 Equal Temperament(十二平均律)。
十二平均律保证了相邻音之间的距离严格相等，所以在十二平均律中，A-E是完美的纯五度，Bb-F也是完美的纯五度。
十二平均律除了八度音程还在使用2:1的频率比，不再保证其他各个音程的完美频率比，只不过将八度之间等分为12个音，这种分割方式演奏音乐的能力简单而出色，除了八度之外的其他音程的频率比会和完美比例稍有偏差，但是人耳很难听出这种差别。事实上，几乎我们听到的所有音乐都是使用十二平均律。
到此为止，所有涉及的概念基本都涵盖到了，题目看似简单的问题背后却有如此复杂的原因，既有物理与生理的因素，也有人文历史原因。当然，还是那句话，并不是说音乐只能用这12个音，全世界各种文化中的音乐往往有着不同的音律系统，但是这些音律系统最终的目的还是尽可能兼具实用性与易用性。</description></item><item><title>嘿，明年见</title><link>https://morven.life/posts/2021-retrospect/</link><pubDate>Sat, 25 Dec 2021 00:00:00 +0000</pubDate><guid>https://morven.life/posts/2021-retrospect/</guid><description>四天前是冬至日，北半球的昼夜等分点，意味着接下来朝着不断延伸的白昼行进，那时候我还构思着怎么来完美地跨年，犒劳一下辛苦了一年的自己。然而，两天后西安宣布紧急封城，一下子我们又回到了2020年年初。但是仔细想想，我个人受到封城的影响真的是微不足道，最多也就是得自己买菜做饭，暂时搁置健身计划等。有时候觉得自己挺幸运地选择了一个和实体经济不密切相关的行业，借助于现代科技只需要电脑与网络就可以完成工作，所以有效地规避了疫情反覆带来的影响。反过来讲，也正是因为这点儿幸运，所以不得不更「卷」。
言归正传，这是一篇正经的年终总结，但是我想水一水，因为重要的事情基本都囊括在上一篇博客中了。从10月到12月也没什么大事件发生，唯一值得记录的是Kubeconf China 2021。和去年一样，因为疫情原因，还是通过线上方式举行。这次我们在虚拟的展台介绍了OCM以及基于OCM的多云网络解决方案。连续两年的线上举行方式，感觉大家的热情都有所削减，也可能是K8s已经到了创新的倦怠期，很少有哪个主题能够吸引大批的目光。不管怎样，我们相信下个KubeConf会有更多关于多云的主题出现。
接下来的一年，大方向还是基于OCM做更多的尝试。其中一条线是关于多云的可观测性的演化，从基础架构层的观测扩展到用户程序的观测；另一条线是基于多云的服务网格尝试，虽然现在有好几种不同方案备选，但是最终的成型方案还有待商榷。当然这两条线并不是完全独立的，因为服务网格很重要的一个功能就是提供服务的可观测性。</description></item><item><title>这半年</title><link>https://morven.life/posts/half-year-of-2021/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://morven.life/posts/half-year-of-2021/</guid><description>好久没更新博客了，准确的说上次更新还是在半年多之前换工作之际。
半年前我的WX通讯录里面增加了很多同行，虽然其中大部分人都是在Istio社区认识的，但在那之前也没有真正互动过。回头想想找工作的那段时间，自由却不自在，好在很多同事、同行给了很多机会，使我顺利找到新工作。之前也一直没时间感谢认可我的同事、同行以及各厂的HR，借此由衷感谢特别是鹅厂与菊厂的大大们赏赐的机会，期待以后能够一起共事。当然，我也特别感激我现在的东家，红帽(Red Hat)给的机会。之所以选择红帽的原因也很简单，熟悉的团队加上熟悉的产品，以至于入职第一天开始提交了code&amp;hellip;
展开来说，红帽到底是一家怎样的公司，估计很多人知道红帽玩开源很溜。没错，基本上红帽产品的商业模式都是基于开源社区的，当然我们组的产品也不例外，完全开源在Github上面，有兴趣的朋友们请前往传送门。借此，也宣传一下OCM(Open Cluster Management)项目，该项目是我们这条产品线RHACM（Red Hat Advanced Cluster Management for Kubernetes）的开源精简版本，目标是构建一个完全开源并且第三方中立的多云管理平台，我们也正在申请将它贡献到CNCF Sandbox里面。话说回来，其实红帽不止在源代码级别是“开放”的，更重要的是这种开放的文化其实是渗透到公司的管理文化中，任何人都可以参与到改进他认为不合适或者不正确的公司政策中去。总体来说，红帽是一家工程师文化特别浓重的公司，这也是经常能在红帽遇到业界大佬的缘由之一吧。
那我在其中参与什么样的角色呢？我目前所在的组主要是集中在基于ACM的可观测(Observability)的相关工作，所以这半年其实还是学习到不少监控相关的知识，当然不止是Prometheus+Grafana那一套比较可靠但扩展性不足的方案，我们目前的产品更多围绕Thanos(不是灭霸哦[doge][doge])来构建，后面我们会基于多云的案例扩展更多的功能。上面说的是我目前的主线任务，除此之外我还开了一个副本任务，多云环境中的服务网格。在这方面，红帽多少还是有一些落后，不过未来应该会很快赶上业界的脚步。
关于这半年的工作和生活的变化，简单聊几句吧。首先，我开始尝试了站立办公，实际上我目前站着工作的时间会和坐着的时间基本上是1比1左右，以前对于站立办公不怎么感冒，自从体验了公司的升降桌之后，发现“真香”。
另外，还有一个变化是开始了有规律的健身，基本上一周2-3次，有氧与无氧结合，坚持了有三个月左右了吧，计划后面增加无氧的比例。效果还是有的吧！？为了配合健身，通勤方式也发生了变化，我的“死飞”终于上路了，建议还是装个手刹，另外也可以像我一样，错峰出行，保证安全第一。
以上就是我这半年的流水账了。至于未来，还是有一大推事情需要推进，flag就不立了，在没有落地之前的想法都是扯淡。</description></item><item><title>Farewell, IBM</title><link>https://morven.life/posts/farewell-ibm/</link><pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate><guid>https://morven.life/posts/farewell-ibm/</guid><description>Farewell, IBM
今天是我在IBM的最后一个工作日，上午到公司后整理了私人物品，拿了离职证明，中午和几个同事吃了散伙饭，本来也想着轻轻松松度过在IBM的最后一天，但在归还笔记本和工牌的那一刻还是有些伤感。可能每一个从IBM“毕业”的人都和我有一样的感觉吧，就是那种在职时会花式吐槽它，但真到离开时才发现它真是良心公司。
我与IBM的缘分从大三就开始了，记得我的第一份实习就是从IBM上海研发中心开始，那时候自己刚从校园走出来，什么都不懂，但当时的mentor还是会耐心地给予指导，同事们也会在生活上尽可能地给我提供帮助，从来不会因为自己是实习生而差别对待，整个工作氛围轻松和谐。对IBM的好感从那时候就开始了，以至于后来研究生期间再去其他互联网公司实习再也没有找到这种感觉。
正式加入IBM也算是机缘巧合，15年那个夏天我研究生毕业后直接作为pure blue加入IBM的大家庭。从刚入职时的那股兴奋劲儿到后来EPH培训的大开眼界，从科技二路中清大厦到锦业一路软件园，从高性能计算LSF产品到云原生全栈升式ICP……将近六年的时间留下了太多回忆，伴随着这些回忆的便是成长。在IBM的这几年我学习到了以前没有机会接触的东西，特别是在云原生和开源领域，无论从广度还是深度方面来说，我主观上认为自己都有长足的进步。这一点儿真的非常感谢我的老板和mentor，感谢他们提供的宝贵机会。
天下没有不散的筵席，纵有再多眷恋，仍须策马扬鞭。现在我更愿意以成年人的方式结束我在IBM的六年，毕竟我的目标是星辰大海，LOL～
在此，也祝愿我的老东家乘风破浪，再上“云端”！
青山不改，绿水长流，他日江湖再见!</description></item><item><title>请回答「2020」</title><link>https://morven.life/posts/the-answer-of-2020/</link><pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate><guid>https://morven.life/posts/the-answer-of-2020/</guid><description>一转眼2020年就要过去了，依然记得12月初有人在朋友圈里发了这样一条状态更新：
“距离迈进2021剩下不到一个月！”
我当时在想，大家应该都对于2020年都已经不再抱有希望，不再发“12月请善待我”之类的状态，而是直接呼唤“2021年”。
不用多想，2020年大事件的密度应该是前所未有的，我们的感官每天都被这这爆炸的信息量刷新着，如此魔幻的2020让我们见证了多少历史上的第一次。如果要为2020年做一个时间胶囊，里面应该放些什么？口罩？健康码？新冠疫苗？科比的球衣？打工人？月球土壤？
真的要我回答2020的话，我的关键字会是「波折」。
早在1月份的时候，在美国的大舅就提醒我们要注意武汉流感的发展，当时觉得也没有什么，反正对于在家工作这件事情也不排斥，甚至对自己的“独处”经验也是十分自信，对于可以自由支配的时间从来都是安排得明明白白。没想到一语成鉴，疫情的发展远远超出预期。到了3月份初，蔬菜水果也出现了供不应求的状况，每次都需要预约抢购，口罩价格不止水涨船高，关键是很难抢购得到，于是3月份出行受到了严重的限制。无奈最终只能求助于大舅从美国邮寄一批口罩回来，然而，等到口罩寄到国内的时候已经到了4月份，那是的疫情已经有所缓和。
也正是从3月份开始，不争气的智齿开始发炎，情况逐渐开始恶化，每天晚上都感觉有个电钻一直在钻腮帮子，太阳穴扯着神经痛，疼到无法集中化注意力思考，当时的精神状态蔫到极点。但是当时因为疫情原因不方便跑去医院，于是咬着牙坚持到了6月，医生看到拍的片子之后都觉得难以相信我坚持了那么久，最终把掉智齿也就用了不到5分钟（介于画面过于血腥，图片就不放出来了），但是整个人终于解脱了出来，瞬间感觉风轻云快。
然而，就当我以为这一切就像疫情开始好转的时候，没想到又被现实的巨浪无情地拍打。拔过智齿之后本想休几天假，不巧的是，时间点正好赶上另外一个产品组 Q2 的发布。这里有些背景需要解释一下，我们组所有云原生产品在 Q1 就率先完成了全面拥抱 Operator 的部署安装模式，也开始使用 OLM(Operator Lifecycle Manager) 与我们自研的 ODLM(Operand Deployment Lifecycle Manager) 来管理所有云原生产品的生命周期。这是一个非常重要的新特性，这意味着所有依赖于我们组云原生产品的上层产品都必须遵循相同的模式。于是我被临时抽调过去辅助他们完成 Q2 的发布版本。本来以为不会太艰难，但是他们产品组的混乱程度远超我的预期，6月份的产品发布被拖到7月底。在这期间打破了我在公司期间最长的加班记录，产品 upload 的前几天我后背开始出现过敏症状，我咬着牙坚持到了产品正式 GA 后的第一个周末去医院检查，才发现自己的了过敏性皮炎。
说实话，我此前一直对于自己的身体状态很有自信，周末高强度的打几个小时的球都轻轻松松，每天的运动量不够都不会上床休息，虽然偶尔饮食不规律，但从来没有出现过如此疲惫不堪的状况。现在，我要开始认真思考如何“养生”，到了这个年纪，是不是喝啤酒、吃冰淇淋都想放两粒枸杞?
回到工作，今年能够参与开源社区的时间明显减少了很多，这从我的 Github 提交历史就可以看出来：
主要原因是公司产品策略的变化，我自己也要跟着调整，以前注重的开源方向被挤压得基本没有了空间。这直接导致我在 istio 社区的活跃度明显降低，去年基本可以全勤参加 istio 社区 ENV WG 的夏令时周会，今年参加的次数屈指可数。但是，我也花时间接触了不少开源项目，包括迁移并成规模地开始应用 k8s 原生 CICD 系统 Prow，接管了目前已经开源的全部 Common Services 项目与部分 IBM MCM 项目的构建流水线，同时增加了 Prow 多平台构建的能力使之适应 IBM 的云原生产品构建目标。另外，年中的时候因为另外一个产品组的需求，使得我有机会深入了解 Kong API网关的功能与实现，还有它与其他 API 网关在用户场景上的区别，我甚至花了一段时间调研了 k8s 生态圈内的各种主流 API 网关的应用场景与实现细节，但是不久便被叫停。
2020年，光怪陆离，有人见尘埃，有人见星辰，虽然这一年之于我始终都是乱糟糟的，自己好像什么也没做好，尤其在这兵荒马乱的12月。但是新的转机已经暂露头角，希望这2020年所有的鸡毛蒜皮换成2021年的风和日丽。最后，以一句话祝福自己能在2021年“牛”转乾坤：
前路浩浩荡荡，万物皆可期待</description></item><item><title>我的「2019」</title><link>https://morven.life/posts/2019-retrospect/</link><pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate><guid>https://morven.life/posts/2019-retrospect/</guid><description>TL;DR 最近我发现自己对于思考和记录的欲望在慢慢消亡，这是件很令我沮丧的事情。“少愤怒而多思考”的人设正在崩塌，我在向着自己厌恶的方向衍化，附和着，愤怒着，可一旦冷却翻篇之后，又恢复到若无其事的状态。归根结底，我没有以前那么坚定了，对「自我」的认同感逐渐淡化，开始被生活的惯性驱动，不去思考为什么，一旦开始随波逐流，就会发现一切原来这么轻松。但始终，我发现自己对于放飞自己充满惶恐，尤其是在进入到放纵之后的“贤者模式”的时候。与其被这种循环往复的矛盾折磨，不如投入到工作当中，至少不会有失落感。所以，这一年我基本放弃“抵抗”，避免思考为什么，开始享受这一年加速的节奏。
是告别也是开始 这一年注定是个说再见的一年，作为一个影迷，这个时代的我们也是幸运的，因为我们有着共同的记忆，漫威宇宙；有时候你会感慨十年真的很短，弹指一挥间，反过来想想，终局之战是集结，是重聚，但也是新时代的开始。这一年我们愤怒，声讨 HBO ，我们会怀念狼家的孩子流离失所的模样，我们期待龙妈身披铠甲力挽狂澜的终章，“问君能有几多愁，恰似六季过后无权游”。但是我们也会惊叹 HBO 用一种阴冷，克制却令人毛骨悚然的方式将切尔诺贝利的悲鸣呈现出来，它时刻提醒着对于自然与规律，我们始终应该保持敬畏之心。这个时代的我们注定是怀旧的，我们怀念 Queen ，怀念佛雷迪，遗憾我们没有亲身经历那段充满爱、痛苦和接纳的音乐之旅；我们想以一部《爱尔兰人》重温当年风华正茂的阿尔帕西诺、德尼罗与乔·佩西共同演绎的黑帮传奇；我们想象着上世纪六七十年代风起云涌的好莱坞，光怪陆离的电影中的电影往事；我们在菲尼克斯肆意癫狂的小丑表演中看 DC 如何在后黑暗骑士时代重新扳回一局；
当然，2019年我的光影之旅里面也不乏优秀的华语电影。我看到了哪吒的横空出世，《流浪地球》的荡气回肠，《少年的你》的真实无助；好的影视剧也层出不穷，《我们与恶的距离》让我学会重新审视现实，《长安十二时辰》让我领略盛世长安美景的同时也赞叹古人的理想抱负；甚至一些精彩的华语综艺也开始摆脱刻板印象，突出重围，《乐队的夏天》让我享受音乐的同时开始尊重摇滚；《圆桌派》继续教我如何做一个人畜无害的空巢老人；《奇葩说》继续满足着我围观不怕事儿大的幻想。
每一颗苹果都值得被偷吃。
这一年还有很多没有提及的书影剧，它们不只是茶余饭后的谈资，甚至是我迷茫低落时的一颗启明星。很期待在新的一年我有幸见证更多优秀影视剧的诞生。
一些小小的成就 回顾过去一年，工作上取得了一些小的进步，除了不断完善基础网络层技术栈，也更加深入地钻研了 Istio 以及 Envoy 。之前不断横向地扩展自己的知识领域，却没有用心向下深入探索，导致面对很多技术话题都可以侃侃而谈，可是遇到实际问题的时候无处下手。于是干脆从现实案例出发，在多耦合的复杂环境中练级打怪。
上半年处于持续的三线程并发工作状态，一方面完成正常也是份内的 ICP 常规开发任务，另一方面帮助在客户在生产环境实施 Istio ，同时，还要在 Istio 社区推动开源产品的不断演进。
由于工作资源变动，年中有一段时间在 Kubernetes-Sig 社区参与开发 [cluster-api] (https://github.com/kubernetes-sigs/cluster-api)，参与周期并不是很长，很多问题并没有深入研究，只是总体上对以云原生的方式管理 k8s 集群的生命周期有了新的认识。
九月初开始深入调研 k8s 原生的 CICD 利器 Prow ，并将部分项目从 Travis 迁移到 Prow ，使用 Prow 的好处除了可充分利用 k8s 自身的编排监控功能管理 CICD 流水线之外，它还提供了各种插件完成传统 CICD 工具（如 Travis, CirleCI 等）没有的命令式自动化工具，对于 k8s 原生项目尤其友好。
这一年马不停蹄，但仔细想想收获也确实不少，一方面虽然过程曲折，但最终还是帮助客户完成了将 Istio 投入生产环境中，虽然规模不是很大；另一方面，花费了大量时间参与到社区 Istio 的开发与讨论中，从 1.1 到 1.4 ，保证了之前社区承诺的每三个月的大版本顺利更新，当然，最最重要的是，使得 Istio 1.0 发布之初的性能问题得到显著改善，同时， Istio 官方提供的 Operator 也随 1.</description></item><item><title>Istio 的前世今生</title><link>https://morven.life/posts/istio-history/</link><pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate><guid>https://morven.life/posts/istio-history/</guid><description>其实要彻底了解 Istio 以及服务网格出现的背景，就得从计算机发展的早期说起。
下面这张图展示的的通信模型变种其实从计算机刚出现不久的上世纪50年代开始就得到广泛应用，那个时候，计算机很稀有，也很昂贵，人们手动管理计算机之间的连接，图中绿色的网络栈底层只负责传输电子信号和字节码：
随着计算机变得越来越普及，计算机的价格也没那么贵了，计算机之间的连接数量和相互之间通信的数据量出现了疯狂式的增长，人们越来越依赖网络系统，工程师们必须确保他们开发的服务能够满足用户的要求。于是，如何提升系统质量成为人们关注的焦点。计算机需要知道如何找到其他节点，处理同一个通道上的并发连接，与非直接连接的计算机发生通信，通过网络路由数据包、加密流量等等，除此之外，还需要流量控制机制，流量控制可以防止下游服务器给上游服务器发送过多的数据包。
于是，在一段时期内，开发人员需要在自己的代码里处理上述问题。在下面这张图的示例中，为了确保下游服务器不给其他上游服务造成过载，应用程序需要自己处理流量控制逻辑，于是网络中的流量控制逻辑和业务逻辑就混杂在一起：
幸运的是，到了上世纪60年代末，TCP/IP 协议栈的横空出世解决了可靠传输和流量控制等问题，此后尽管网络逻辑代码依然存在，但已经从应用程序里抽离出来，成为操作系统网络栈的一部分，工程师只需要按照操作系统的调用接口进行编程就可以解决基础的网络传输问题：
进入21世纪，计算机越来越普及、也越来越便宜，相互连接的计算机节点越来越多，业界出现了各种网络系统，如分布式代理和面向服务架构：
分布式为我们带来了更高层次的能力和好处，但却也带来了新的挑战。这时候工程师的重心开始转移到应用程序的网络功能上面，这时候的服务之间的对话以“消息”为传输单元，当工程师们通过网络进行调用服务时，必须能为应用程序消息执行超时、重试、确认等操作。
于是，有工程师是开始尝试使用消息主干网（messaging backbone）集中式地来提供控制应用程序网络功能的模块，如服务发现、负载均衡、重试等等，甚至可以完成诸如协议调解、消息转换、消息路由、编排等功能，因为他们觉得如果可以将这些看似同一层面的内容加入到基础设施中，应用程序或许会更轻量、更精简、更敏捷。这些需求绝对是真实的，ESB(Enterprise Service Bus) 演变并满足了这些需要。ESB 在是2005年被提出的，它的概念特别类似于计算机硬件概念里的 USB, USB 作为电脑中的标准扩展接口，可以连接各种外部设备；而 ESB 则就把路由管理、协议转换、策略控制等通用应用程序网络功能加到现有的集中式消息总线里。
这看似行得通！
可是，在实施 SOA 架构的时候，工程师们发现这种架构有点儿用力过度、矫枉过正了。集中式的消息总线往往会成为架构的瓶颈，用它来进行流量控制、路由、策略执行等并不像我们想象那么容易，加上组织结构过于复杂，强制使用专有的格式，需要业务逻辑实现路由转换和编排等功能，各个服务之间耦合度很高，在敏捷运动的时代背景下，ESB 架构已经无法跟上时代的节奏了。
在接下来的几年内，REST 革命和 API 优先的思潮孕育了微服务架构，而以 docker 为代表的容器技术和以 k8s 为代表的容器编排技术的出现促进了微服务架构的落地。事实上，微服务时代可以以 k8s 的出现节点划分为“前微服务时代”和“后微服务时代”：
“前微服务时代”基本上是微服务作为用例推动容器技术的发展，而到“后微服务时代”，特别是成为标准的 k8s 其实在驱动和重新定义微服务的最佳实践，容器和 k8s 为微服务架构的落地提供了绝佳的客观条件。微服务架构有很多好处，比如：
快速分配计算资源 快速部署升级迭代 易于分配的存储 易于访问的边界等等 但是作为较复杂的分布式系统，微服务架构给运维带来了新的挑战。当工程师开始接尝试微服务架构，必须考虑如何进行微服务治理。狭义的“微服务治理”，关注的是微服务组件之间的连接与通讯，例如服务注册发现、东西向路由流控、负载均衡、熔断降级、遥测追踪等。
历史总是惊人的相似，面对类似的问题，第一批采用微服务架构的企业遵循着与第一代网络计算机系统类似的策略，也就是说，解决网络通信问题的任务又落在了业务工程师的肩上。
这个时候出现了看到诸如 Netflix OSS 堆栈、Twitter Finagle 以及赫赫有名的 Spring Cloud 这样的框架和类库帮助业务工程师快速开发应用程序级别的网络功能，只需要写少量代码，就可以把服务发现、负载均衡、路由管理、遥测收集、监控告警等这些功能实现：
但是如果仔细想一下的话，就会发现这样编写微服务程序的问题也很明显。
这些类库或者框架是特定语言编写的，并且混合在业务逻辑中（或在整个基础设施上层分散的业务逻辑中）。姑且不说类库和框架的学习成本和门槛，我们知道微服务架构问世的一个承诺就是不同的微服务可以采用不同的编程语言来编写，可是当你开始编写代码的时候会发现有些语言还没有提供对应的类库。这是一个尴尬的局面！这个问题非常尖锐，为了解决这个问题，大公司通常选择就是统一编程语言来编写微服务代码。另外的问题是，怎么去做框架升级？框架不可能一开始就完美无缺，所有功能都齐备，没有任何 BUG。升级一般都是逐个版本递进升级，一旦出现客户端和服务器端版本不一致，就要小心维护兼容性。实际上，每做出一次变更都需要进行深度的集成和测试，还要重新部署所有的服务，尽管服务本身并没有发生变化。
与网络协议栈一样，工程师们急切地希望能够将分布式服务所需要的一些特性放到底层的平台中。这就像工程师基于 HTTP 协议开发非常复杂的应用，无需关心底层 TCP 如何传输控制数据包。在开发微服务时也是类似的，业务工程师们聚焦在业务逻辑上，不需要浪费时间去编写服务基础设施代码或管理系统用到的软件库和框架。把这种想法囊括到之前架构中，就是下边这幅图所描述的样子：
不过，在网络协议栈中加入这样的一个层是不实际的，貌似可以尝试一下代理的方案！事实上，确实有一些先驱者曾经尝试过使用代理的方案，例如 nginx/haproxy/proxygen 等代理。也就是说，一个服务不会直接与上游服务发生连接，所有的网络流量都会流经代理，代理会拦截服务之间的请求并转发到上游服务。可是，那时候代理的功能非常简陋，很多工程师尝试之后觉得没有办法实现服务的客户端所有需求。
在这样的诉求下，第一代的 sidecar 出现了，sidecar 扮演的角色和代理很像，但是功能就齐全很多，基本上原来微服务框架在客户端实现的功能都会有对应的功能实现：</description></item><item><title>重拾少年时期的「信仰」</title><link>https://morven.life/posts/2018-summary/</link><pubDate>Fri, 28 Dec 2018 00:00:00 +0000</pubDate><guid>https://morven.life/posts/2018-summary/</guid><description>不必太纠结于当下，也不必太忧虑未来，当你经历过一些事情的时候，眼前的风景已经和从前不一样了。
窗外的霓虹灯让我有点儿走神，在下高铁回家的出租车上，我被出租车司机套路了年龄。本来以为他会说看起来这么年轻之类的客套话，但是他接下来说的话让我有点儿猝不及防！
快三十岁的人了，该娶媳妇儿了！
我一时不知道该怎么回复，陷入了沉思。我到底还年轻吗？这个问题也许在半年前我会毫不犹豫的回答，我当然年轻，我还没有闯出什么名堂，怎么可能变老呢？但是现在呢？我有点儿心虚！出租车在一路飘红的二环边上缓缓挪动，走走停停，恍恍惚惚中，我的大脑开始浮现出那个我难以接受的事实：我真的老了。
一直以来，作为家里最小的，我一直拥有简单的信仰，就是去做一个优秀的人，让所有人夸赞；我有自己的“偶像”，追赶成为他的步伐甚至成了我少年时期的生活主旋律。虽然及其功利的信仰不值一提，真是肤浅至极，但是日子过得很纯粹，为因为小小的成就而高兴好几天，也会为偶然的失利懊恼而睡不着觉。总之就是时刻想证明自己，所有的这一切感觉都是理所当然，心中时刻提醒自己不要辜负每个关心自己的人。
然而，成长就是一个摸石头过河的过程，尤其对于我这个出身普通家庭的人来说。一路磕磕绊绊，我开始质问为什么大人们都在做自己认为不对的事情而心照不宣，到底是该回归初心还是随波逐流？俨然，少年时的单纯开始出现裂痕，天平开始向另外一端倾斜，甚至开始影响自己的日常生活，在人生的重要十字路口开始犹犹豫豫，不知所措！这个时候我多么希望有一位看穿一切的长者给我指导？然而，这场源自于内心的混乱，终究只能在内心寻找答案。有时候连续好几个月，我在想如果不离开自己这种舒适的环境，如果不能给自己规划未来的出路，我就无法成为自己欣赏的人。然而自己终究没有那种魄力，有时候这样的纠结让我几度抑郁，同时也时刻提醒自己，简简单单没心没肺不也挺好！
我其实很清楚这种执念会将自己带完何处？固执，腐败，糜烂！我要放下哪些愚蠢的想法，重新认识自己，不去思考为什么？踏踏实实做好每一件事情，享受小成就带给自己的快感。虽然我又一次以为我找到了事物的真相，但是在这个片刻，我似乎看大了少年时代的自己，我是心满意足的。
所以最终2018年的年底，我要结束了这种纠结的状态，把自己重新放到“野外”，用一种新的视角去看自己，看世界。去按照自己希望的方式，改造自己，做一次升级。
因此，在2019年，我要更高效的提升自己的能力，做更多具备稀缺性和自我认同的事情，重拾少年时期的「信仰」！</description></item><item><title>又是冬至日</title><link>https://morven.life/posts/thoughts_in_winter_solstice/</link><pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate><guid>https://morven.life/posts/thoughts_in_winter_solstice/</guid><description>冬至已到，也该向2017告别了。
最近酝酿着写写2017年，但到真正提笔的时候却无从下手。2017年，我一直很努力，却总是停留在原地。该离开的终究没有留下来，该坚持的还是半途而废。
2017发生了很多事，心情一直处于低谷，时常在深邃的夜晚开始怀疑自己当初的选择。理想、信念和情感&amp;hellip;所有种种陪伴了自己青春岁月的精神支撑，在这冰冷冷的，麻木的，毫无人性的现实世界里显得沧桑而无力。可能是自己过于“玻璃心”，也经常被周围的人添加“不成熟”的标签。
不是我无法承受现实世界的洗礼，我只是想按照自己的方式来生活。仔细想想，这些年虽然变化不少，但自己始终是个理想主义斗士。
以前的我有自己的原则，却没有太多的阅历，此外，行动力也不太够，但是仍然对这个世界充满向往。 而现在的我，却因为短期内见过太多社会的黑暗面，变得无法坚持自己的信念而愤世嫉俗，因为我内心的良知始终让我无法和这个美好而丑陋的世界和解。
我在无数个夜晚想象着拥有一台时光机器，带着自己回到过去，用一种对世界纯粹的热情感染早已麻木的自己，提醒自己世界上还有正义，原则还有信念等一众美好的东西。
在接下来的时间内，我期待用自己的经历和行动力，告诫尚处于十字路口的自己坚定内心的选择，而不是在理想的分崩离析中不断回味那些外表逐渐模糊但内在却深入骨髓而不能磨灭的印记。
不管2017年对我来说是多么 tough 的一年，毫无疑问，它也将会成为我永远都铭记和感恩的一年。
希望在即将到来的2018年里，不要再掉进自己思想的漩涡里，重新拿回了生活的主导权，不忘初心，坚持梦想。
人生几回仿往事，山形依旧枕寒流。 ——刘禹锡《西塞山怀志》</description></item><item><title>十年，火影</title><link>https://morven.life/posts/ten-years-for-naruto/</link><pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate><guid>https://morven.life/posts/ten-years-for-naruto/</guid><description>去年听到火影忍者漫画完结的时候，心里是极其复杂的。急于见证万年吊车尾主人公鸣人的结局，却也充满对于十年青春陪伴的不舍。
第一次见到火影是一个黄头发中二少年踩着树杈飞来飞去，身后跟着几个小屁孩嘴里大叫着“佐助”。当时觉得这种需要按着牛顿棺材板才能看的动漫实在无聊，但是正值高中紧张复习期间，偶尔借用同桌的“最黑科技”纽曼 MP4 看几集缓减一下复习的压力。
对火影路转粉应该是在“复制忍者”旗木卡卡西与原雾隐村“忍刀七人众”之一的桃地再不斩在天桥大决战。当时和几个小伙伴周末躲在教室偷用教室的多媒体反复播放那几集，俨然被各种各样的结印手势以及高潮迭起的热血剧情吸引得神魂颠倒。一方是年仅12岁时就成为上忍木叶天才旗木卡卡西，加上可以复制了上千种忍术的开挂写轮眼；另一方是雾隐村“忍刀七人众”之一、无声杀人术技巧之高超的“鬼人”桃地再不斩。两人实力相近，却有着不同的目标，经过几番焦灼战斗，最后在漫天的飞雪中，当再不斩死在白的身边时，流着泪说道：“如果可以的话，真想和你去同一个地方。”与此同时，一颗雪花的结晶则因为白刚刚死去时残留的体温而在白的眼角融化流下，仿佛印证了再不斩那句“白，是你在哭泣么？”再配上背景音乐高梨康治的《Sadness and Sorrow》，​这成为火影里最初也是最让人感动以及震撼的画面。
其实，火影的战斗场景非常丰富，除了高速飞行和冲刺、拳脚过招、立体镜头、火焰爆发等，还会有很多战斗的细节与伏笔。超燃的热血剧情加上富有逻辑性的战斗场景设计完全让高中时期的我们进入了节奏。随着剧情的展开，久而久之，开始对“万年吊车尾”鸣人的未来越来越感兴趣。鸣人，见证了白心甘情愿为再不斩牺牲，感同身受地与我爱罗诉说着相同的过去，将佐助视为最重要的羁绊，为了对小樱的承诺，拼尽全力追回佐助，独自练习着更强的忍术，为自己的父母深深地感到骄傲，更想用爱感化九尾，他所经历的一切，都为他贯彻自己的忍道。正是印证了鼬所说的“不是当上火影的人才能得到认可，只有得到大家的认可才能当上火影”。
其实不止主人公，火影里面每个人物都是栩栩如生。 实力又神秘、帅气又低调、漫不经心又可靠、冷酷中还有温暖的天才忍者旗木卡卡西； 高冷而睿智、隐秘而伟大、残忍却温柔、怀揣光明于黑暗中独自行走的最完美忍者宇智波鼬； 猥琐好色而真性情、荒诞不羁却坚韧刚强、洒脱随和而正气凛然、推动整个火影进程的自来也老师。
我想火影完结对我来说不是件过于悲伤的事情，尽管那天听到消息时我有种不可填补的缺失感，但是关于鸣人的故事暂时告一段落，但新的故事还在延续，更何况我们还有高梨康治大师级的音乐。每个人都有自己的人生，无论振作拼搏，还是颓废懈怠，时间终会带走一切，我们能留下的，只是种子，就像火影的种子早已埋在心底，何时发芽？也许明天，也许就是现在。</description></item><item><title>毕业这两年</title><link>https://morven.life/posts/two-years-after-graduation/</link><pubDate>Tue, 20 Jun 2017 00:00:00 +0000</pubDate><guid>https://morven.life/posts/two-years-after-graduation/</guid><description>步入6月，一场青春的盛宴，如期而至，这场盛宴的主题，是毕业。我虽是这场盛宴之外的人，但看到微博上在校同学们的种种分享，仿佛是在提醒自己：你都毕业两年了！
是啊，我毕业都两年了！
想到这个，心中难免感慨万千，但是要谈谈这万千感慨，却又不知从何说起，真有一种情深而何以往之的感觉！
毕业这两年，让我渐渐感到陌生的，是自己。我似乎已经越来越不清楚自己是谁，越来越不知道该往何方。我时而追忆大学时代的那个自己，以寻求一点自我的慰藉。当慰藉醒来，我才猛然发现，和过去的自己相比，我当前的生命轨迹，正在不断下坡的过程。
大学时的那个我，总得而言，是一个乐于奉献、敢于担当的人。从大一入学之处欢呼雀跃，奔走于各个社团之间，到研究生逃离实验室，和几个“疯狂的哥们儿”没日没夜地呆在破烂不堪的创业楼里编写爬虫系统，那时候感觉自己还能“输得起”，所以做什么事情都不惧困难，在别人看来那是“不务正业”，自己却乐此不彼。
但是从毕业到现在的这两年的工作经历，平平淡淡，没有输入，我不敢直视这是我自己。当然，并不是我现在的处境有多么的不堪，而是精神上“斗志泯灭”。回头看看那个曾经有着纯高理想追求，并定会为之奋斗的自己，如今正处于一种“望风披靡”，追求“息事宁人”的状态。
毕业这两年，我一直就职于同一家公司，两年前的今天，我期待着可以顺风顺水地“大干一番”，毕竟公司肯定期待纯粹的技术出生，坚持技术路线的新鲜血液。的确，我投入了极大的热情，也获得了良好的发展。但是由于某种原因，公司一直处于”不稳定期“，自己也努力适应公司公司的转变策略。这样的好处是很明显的，经过几次的变化，虽然职位再三调整，但自己已经适应公司工作环境，也接触了目前各个产品线上的研发同事，合作也非常愉快，显然，公司需要这样能跟着公司战略转变的员工。然而，经过几轮的变化，自己心态早已从之前的“主动学习”，“积极探索”转变到“随波追流”，追求“完成自己分内工作就行”。我不知道这种变化是一种普遍现象，还是我自己开始濒临堕落边缘。
对工作没有了开始时的热情，问题到底处在哪里？整个而言，我现在仍然处于一个迷茫期，前路漫漫，不知所以。
虽然很多的事还没有想清楚，但并不意味着活得糊涂。我这两年虽然让自己的一些有点沉寂了，但是很多东西，我依然在坚持。坚持对善的向往，坚持对独立人格的向往，坚持读书学习思考，时刻保持着对人生观与价值观的自信。暂时得不到太多，只能好好坚持一些自认为可贵的东西，唯有坚持，才有改变的可能。</description></item><item><title>后会无期，2016</title><link>https://morven.life/posts/farewell-2016/</link><pubDate>Sun, 18 Dec 2016 00:00:00 +0000</pubDate><guid>https://morven.life/posts/farewell-2016/</guid><description>2016年，很长又很短。 大学毕业，拼命折腾。 概括起来，三言两语便是全部，往细里谈，三天三夜也不够。 但我还是要写，有些情感，只能用文字表达，有些思考，在笔尖之下才会刻骨铭心。
生活 从参加工作到现在，差不多一年多了。这期间的大部分时间我都处于“独处”的状态。每天8点准时起床，洗脸刷牙，偶尔去小区外面买个早餐，然后步行到公司。下班不用急着回家，独自呆在电脑前听听歌、看看书。有时候公司周围吃个晚饭，差不多八九点收拾东西回家，天气好的话去球场打打球。回到家后洗澡、刷知乎、追美剧。似乎这一切都靠着惯性驱使着。
我其实对于“独处”是有一定经验的。除了碍于情面上的应酬，大多时候我都喜欢一个人呆着。我比较享受这种独自生活的状态。看书，听歌，看电影，玩手机，或者沏一杯茶然后发呆愣神的呆着，我都很喜欢。“独处”的时候一定要设立一个小目标或者愿景，不管是看一部电影，还是读一本书的一个章节，甚至是完成程序的一个功能；尽量不要再这个目标完成之前去主动打断它。此外，不要在独处的时候做重复无意义的事情，比如刷短视频。
工作 一直在思考，自己到底适合做什么样的开发岗位。从大学本科阶段到研究生，我一直主动涉猎各种计算机的知识，打造自己的技术栈。从最初的汇编语言与 C、到面向对象语言、再到函数式编程，从小型单片机与操作系统到大型分布式系统缓存/并发的设计与实现。我好像从来没有停止过获取新的知识，总想着扩展自己的技能树，却没有沉下心去专攻某项技能。总关注于横向领域的扩充，却忽略技能纵向深度的延伸。
从这方面来讲，2016年确实是等待以及转身的重要节点。因为经历多次工作角色的转变，我不确定什么职位是最适合自己的。说实话，之前没有想过自己会从事前端开发，毕竟发展速度太快，每天都有新的轮子出现，难免不会迷失在其中。但是真正接过这个角色之后，就不要想那么多，我才27岁又不是72岁，既然入了这一行，就要有这一行的“匠人”精神。我一直也没认为 IT 这行多么了不起，我们都只不过是个普通的“手艺人”，经历多年打磨自己的大脑，只有足够优秀才能制作出好的作品。但也正是因为如此，我们可以尽情发挥自己的创意。
从2016年4月开始，开始弥补自己前段领域的空白：从 html 到 jade，从 css 到 less/sass，从 javascript 到 typescript，从 jQuery 到 angular，从 grunt 到 webpack。虽然自己之前也略有涉猎前端知识，但对完整的前端技术栈知识略知皮毛。从最初的简单地写写页面到现在轻松构建整个项目框架，偶尔写个“轮子”提供产品的个性化解决方案。回过头来看，这一年一路走来，发现原来一切其实都不难，只要愿意沉下心去思考、研究，虽然踩了很多坑，但也收获颇丰。现在大部分人对于前段的认识还停留在“刀耕火种”的阶段，其实这几年前端领域的快速发展导致前端工程化已经成为不可逆转的趋势。
对2017年的展望 总的来说，2016年对我来说，还算满意。没有忘记自己的初心，也在不断获取想得到的东西，这比迷失自我的成功更难得吧。希望2017年继续保持这种状态，勿骄勿燥。
多接触移动端开发领域，不管是 iOS 还是 Android 系统学习 UI/UX 方面的知识 多读些历史人文方面的书籍 保持健康的生活习惯 多维度提升自己的能力</description></item><item><title>Webpack 使用小结</title><link>https://morven.life/posts/webpack-summary/</link><pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate><guid>https://morven.life/posts/webpack-summary/</guid><description>分而治之是软件工程领域的重要思想，对于复杂度日益增加的前端也同样适用。一般前端团队选择合适的框架之后就要开始考虑开发维护的效率问题。而模块化是目前前端领域比较流行的分而治之手段。
javascript 模块化已经有很多规范和工具，例如 CommonJS/AMD/requireJS/CMD/ES6 Module ，在上篇文章中有详细的介绍。 CSS 模块化基本要依靠 Less , Sass 以及 Stylus 等于处理器的 import/minxin 特性实现。而 html 以及 html 模版和其他资源比如图片的模块化怎么去处理呢？
这也正是 webpack 要解决的问题之一。严格来说， webpack 是一个模块打包工具，它既不像 requireJS 和 seaJS 这样的模块加载器，也不像 grunt 和 gulp 这样优化前端开发流程的构建工具，像是两类工具的集合却又远不止如此。
总的来说， Webpack 是一个模块打包工具，它将 js 、 css 、 html 以及图片等都视为模块资源，这些模块资源必然存在某种依赖关系， webpack 就是通过静态分析各种模块文件之间的依赖关系，通过不同种类的 Loader 将所有模块打包成起来。
webpack VS gulp 严格来说， gulp 与 webpack 并没有可比性。 gulp 应该和 grunt 属于同一类工具，能够优化前端工作流程，比如压缩合并 js 、css ，预编译 typescript 、 sass 等。也就是说，我们可以根据需要配置插件，就可以将之前需要手动完成的任务自动化。 webpack 作为模块打包工具，可以和 browserify 相提并论，两者都是预编译模块化解决方案。相比 requireJS 、 seaJS 这类“在线”模块化方案更加智能。因为是“预编译”，所以不需要在浏览器中加载解释器。另外，你可以直接在本地编写 js ，不管是 AMD/CMD/ES6 风格的模块化，都编译成浏览器认识的 js 。</description></item><item><title>Pied Pier 中的无损压缩算法</title><link>https://morven.life/posts/data-compression-in-pied-pier/</link><pubDate>Sat, 18 Jun 2016 00:00:00 +0000</pubDate><guid>https://morven.life/posts/data-compression-in-pied-pier/</guid><description>最近终于追完了 HBO 的自制喜剧《硅谷》第三季。《硅谷》应该算是一部非常小众的美剧了，主要讲述了湾区几个 IT 男创业的故事，剧情并没有过多围绕他们怎么写代码，而是把关注点聚焦在创业想法的诞生过程以及初期公司的成立以及与风投斡旋过程中的戏剧冲突上，让“内行人”啼笑皆非。每季的后几集都有点儿燃，原本“改变世界”之类现实生活中的烂梗，却是最触动内心的！
《硅谷》之所以与众不同，还因为剧中的很多理论都很值得推敲。其中最重要的大概是第二季第八集中 Richard 提出的所谓 middle-out 数据压缩算法，也正是基于此算法，才诞生了后来的 Pied Pier。为了便于理解，我们先来了解一下数据压缩算法的基本原理、信息熵以及霍夫曼编码。
数据压缩的原理 数据压缩原理很简单，概括起来就是找到那些重复出现的数据，然后用用更短的符号替代，从而达到缩短数据大小的目的。
例如，我有一段文本 ABCDABCDABCDABCDABCDABCD，显然我们使用 6ABCD 也能替代原来的数据，因为可以根据 6ABCD 推算出原文本 ABCDABCDABCDABCDABCDABCD，这样的好处是数据从原来的24字节变成了5字节，数据压缩比为“5/24”约等于“20.8”。事实上，只要保证对应关系，可以用任意字符代替那些重复出现的字符串。这又让我想到了现在移动互联网时代广泛使用的 Emoji，我们可以使用一个简单的 Emoji 表情来表达原来需要多个字表达的意思。
本质上，所谓“压缩”就是找出文件数据内容的概率分布，将那些出现概率高的部分代替成更短的形式。所以，内容越是重复的文件，就可以压缩地越小。比如 ABCDABCDABCDABCDABCDABCD可以压缩成 6ABCD。与之对应地，如果数据的内容毫无重复，就很难压缩。极端情况就是，遇到那些均匀分布的随机字符串，往往连一个字符都压缩不了。比如，任意排列的10个阿拉伯数字 5271839406，就是无法压缩的；再比如，无理数 π 也很难压缩。
总结一下，压缩就是消除冗余的过程，用更精简的形式表达相同的复杂内容。可以想象，压缩过一次以后，文件中的重复字符串将大幅减少。好的压缩算法，可以将冗余降到最低，以至于再也没有办法进一步压缩。所以，压缩已经压缩过的文件（递归压缩），通常是没有意义的。
数据压缩的极限 我们可以从数学上用反证法证明数据压缩是有极限的，也就是不可能无限压缩一份数据而保证内容不丢失。
假定任何文件都可以压缩到 n 个二进制位以内，那么最多有 2n 种不同的压缩结果。这就是说，如果有 2n+1 个文件，必然至少有两个文件会产生同样的压缩结果。这就意味着这两个文件不可能无损地还原。因此，得到证明，并非所有文件都可以压缩到 n 个二进制位以下。既然 n 是一个基于压缩文件数据确定的数字，那么这个 n 到底是多少？
按照我们前面关于数据压缩原理的介绍，我们知道数据压缩可以分解成两个步骤：
得到数据内容的概率分布，哪些部分出现的次数多，哪些部分出现的次数少 对数据内容进行编码，用较短的符号替代那些重复出现的部分 对于一封确定的数据文件来说，它的概率分布是确定的，不同的压缩算法主要是因为第二部编码方式的不同，最优的压缩算法，当然是最短的符号表示作为替代原数据内容。
我们使用数学归纳法来来演算一下 n 的值：
最简单的情况，我们要压缩的数据只有一部分；这一部分只有两个值，那么一个二进制数就可以表示；这一部分只有三个值，那么就需要两个二进制数来表示；这一部分有 n 个不同的值，那么就需要 log2n 个二进制位来表示； 假设在数据文件各个字符均匀出现的情况下，一个字符在某一部分中出现的概率是 p，也就是说这一部分可能会出现 1/p 种不同的情况，那么，这一部分就需要至少 log2(1/p) 个二进制位来表示； 推广开来，如果文件有 n 个部分组成，每个部分在文件中的出现概率分别为 p1、p2、&amp;hellip;pn，那么替代符号占据的二进制最少为下面这个式子： log2(1/p1) + log2(1/p2) + .</description></item><item><title>写在「2015」年年末</title><link>https://morven.life/posts/2015-retrospect/</link><pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate><guid>https://morven.life/posts/2015-retrospect/</guid><description>2015年马上就要过去了。一年一年是如此的相似，一年一年却又如此的不同。每到年底总想写点什么，算是给自己的一个总结、一个回忆、一个自我述说的契机。 2015年像很多年份一样是平常的，按部就班地数着日子过去了，虽然忙碌，但也收获颇多。2015年又是不平常的，因为2015年是我正式告别学校踏入&amp;quot;江湖&amp;quot;的第一年。2015年对我来说，关键字有「驾证」、「毕业」以及「入职」。
驾证 之前总是一拖再拖，这次真是没法再推了。于是拉了宿舍一哥们儿入坑，组团报名。银子花出去之后便有了动力。从科目一理论到科目二场地考，再到科目三大路考，每周一到周四5点多爬起来赶班车去驾校练车。中午赶回来吃过饭休息之后再去实验室赶论文。还好，全部科目的考试都是一把过，算是对自己的慰藉吧。那几个月下来，认识了很多学车的同学，大多是即将毕业离开南京的学生，而且还认识了个南艺学珠宝设计的妹子（坏笑&amp;hellip;）。那段日子也确实是痛并快乐着，导致拿到驾照之后得了学车后遗症，每天早上天还没亮就睡不着了。学车本不是什么难事儿，只要安排得到，拿到驾照还是挺容易的，也不用为了考试顺利而铤而走险，贿赂教练或考官。
毕业 又毕业了，这一次是真的毕业了。研究生毕业答辩明显比本科毕业答辩阶段严格得多，所以投入了更多的时间在论文上。庆幸自己有个好导师，选题也不错，所以答辩比较顺利。毕业典礼没有本科那么正式，辅导员只是选了一些同学去参加，毕业合影部分同学的脸也是p上去的。临近毕业那段时间各种手续要办，又是档案又是户口，不过总能抽出时间和室友开黑。直到离校当晚，拉着行李箱准备走出鼓楼校区，走在广州路熙熙攘攘的人群中才知道，这次不是回家，这次真要离开了，下次再来不知道是什么时候了。
入职 毕业后回家休息不到一个月正式入职。入职前一周收到 HR 发给我的入职材料列表，发现缺了“无犯罪记录”证明，当时懵了，因为这材料需要回学校保卫科去办。还好，联系到了在南京的同学和辅导员，虽然麻烦，但还是很快就搞定了。接下来就是正式入职，因为之前也有在 IBM 上海实习的经历，对 IBM 的总体情况和公司文化比较了解，所以很快就融入到新的工作环境中。但是计划赶不上变化，我的 hiring manager 所在的部门研发计划有变，所以就被 transfer 到其他组，不过这几个产品组相关性非常高，虽然在技术栈上稍有不同，但对于我来说还是可以轻松应对的。IBM 西安这边主要做的主要是高性能计算相关的产品，核心产品要两款，其他产品都是作为其上层附属产品。技术的选择上 java 多一些，核心产品上使用 C&amp;amp;C++ 多一些。令我不太满意的地方是，工作中对业务的熟悉程度远大于对技术的熟练上，这可能是大商业公司的通病。
2016的期待 又到了许愿时间了，要做也要做有梦想的咸鱼～～
希望能去自己感兴趣的组，做自己感兴趣的事儿； 希望抽出更多的时间看书，学习以及写博客； 希望能多在工作中和外籍同事交流，锻炼自己的口语； 希望坚持体育锻炼，一周跑两次步，周末打一次球； 希望感情能够稳定下来；</description></item><item><title>Ban&amp;Pick 机制与陪审团</title><link>https://morven.life/posts/ban-pick-in-dota-and-jury/</link><pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate><guid>https://morven.life/posts/ban-pick-in-dota-and-jury/</guid><description>Dota(Defense of the Ancients) 最初只是由《魔兽争霸3：冰封王座》的一个 RPG 地图衍变而来，是一款支持多人即时对战的战略游戏。最早的 Dota 地图则在混乱之治时代就出现了，一位叫做 Euls 的玩家制作了第一张 Dota 地图：“Roc Dota”，随后，经过多个玩家进一步完善，以及 IceFrog 的多次修正和更新，游戏最终定格为两个阵营，玩家需要操作英雄，通过摧毁对方遗迹建筑来取得最终的胜利。这种多人在线的竞技模式后来被称为“Dota 类游戏”，对之后产生的多个竞技类游戏产生了深远的影响。
Ban&amp;amp;Pick 机制 如何在比赛中选出一套让比赛的双方都能接受的英雄阵容，同时又要体现出竞技游戏的对抗性和平衡性。一般来说，游戏的对抗性表现为游戏元素的多元化。Dota 这款游戏共有102名英雄，有两个阵营各选五名英雄分辨占据近卫和天灾两方，分三路进行对抗。当然五名英雄的职责各不相同，Carry 位通常在地图的优势路发育，同时要有清晰的大局观，在比赛的后期发挥主力作用。Solo 位，一般在中路对抗，该位置要求选手在中前期有很强的带节奏能力。Ganker，也称为抗压位，游走于各路，配合队友完成击杀对方英雄。剩余的两个位置称为辅助位，主要配合团队控制视野，帮助队友打出优势，从而在战略上压制对方。
假定 Dota 的英雄完全按照其所处的位置排列，（实战中完全不这样，经常原本12号位的英雄随着版本更迭称为辅助，反之亦然）如此每个位置的英雄也就约20名，如果我们再放弃掉一些不常用的英雄的话，实际让选手能够顺畅选择的英雄其实不多。这时，如何让场上选手得以公平竞技打出激情，就必须通过一套规则，选出一套让比赛双方均能够接受的阵容，从而增加比赛的观赏性。那么，选手们应当如何选取自己心仪的英雄呢？
Dota 的设计者 IceFrog 最终采用了一套所谓的“Ban&amp;amp;Pick”的机制，这套机制最早是由千年之前一个在法国的英国人的发明。
陪审制 1135年，英国国王亨利一世去世，根据一份协定，英国国王的继承者将由自幼生长在法国的青年亨利二世于1154年担任。亨利二世是一位非常有野心的国王，开创了一个时代，人称“金雀花王朝”。可刚上任的他作为一个“外国人”，只要想在一个地区内树立权威，那么司法权则应当是极为重要的手段之一。在当时，高贵的法国贵族又如何听得懂英格兰的那些土话呢？如果听不懂别人说什么，作为一国之君，又如何来审理民间纠纷以确立自己的声望？亨利二世又能以怎样的方式，设计出一套完美的制度？
最开始的时候，每当出现土地方面的诉讼时，会由法院发给争议双方一纸令状(令状或由司法大臣发布)，命令争议双方找来十二名和本案无关的人士在上帝面前发誓之后，做出对案件事实方面的裁决。而亨利二世则带人组成巡回法院，当他巡回到该地之后，对案件做出裁决。毕竟，由自己亲手提拔的大臣是懂法语的，自己审完案子下发，再由手下将其翻译成英语传达，是再好不过的事了。
但是，那十二个与本案无关的人，是怎么选出来的？
陪审员的选择一开始是随机选，而且选的比较多。然后双方会有机会了解备选的人员，并且通过辩论来决定谁去谁留。当然，双方都会尽量留下对自己有利的陪审员（Pick），主要是根据职业、性别、年龄来判断是否会同情被告。还有几个机会可以不必给出理由而否定某一个陪审员（Ban）。最后确定一个名单。名单上的人就必须去，因为这个是公民义务的一部分，除非有特殊原因，要是故意不去那就要被起诉。同时，还会有几个备用人选，也必须去，以防有人生病或者出事来不了。 还有一个是选择陪审员的时候会尽量避免选择某些职业，比如律师、法学院的学生、老师、教授等等。主要是排除类似“权威”或者习惯教育指导别人的人，以防以一人之力左右整个陪审团的意见。
对 Dota 这款游戏来说，情况也正是如此，IceFrog 必须采取一套制度，让选手们首选去掉那些对自己特别不利的英雄，从而不会让先选英雄的一方率先抢走版本当中最热门也是最厉害的英雄，以降低游戏的对抗程度。因为对 Dota 来说，选手们竞技环境越是公平，游戏的对抗程度越高，游戏的活力也就越持久。
不过这套制度并非一经制定就一成不变，而是会根据玩家不断的反馈与游戏平衡的调整随之改进。Dota 的 Ban&amp;amp;Pick 规则方式的更迭几乎和 Dota 的游戏版本更迭频率一致。从 Dota 6.28X版本开始到现在的 Dota 6.83，每一代版本非但在游戏本身的平衡性上做出了重大调整，在 Ban&amp;amp;Pick 规则上，IceFrog 也从未掉以轻心。不论是 Ban&amp;amp;Pick 时间还是顺序，甚至于到底 Ban 掉多少名英雄，也是历经多个版本才最终确立。</description></item><item><title>回首「2014」</title><link>https://morven.life/posts/2014-backward-glance/</link><pubDate>Fri, 26 Dec 2014 00:00:00 +0000</pubDate><guid>https://morven.life/posts/2014-backward-glance/</guid><description>一年将尽，一年伊始，兜兜转转，2014年就这样走近年末，不禁让人措手不及。似乎是一样的时光、一样的节奏、一样的人物，变换着不同的场景、不同的面孔、不同的心情，重重叠叠过去了一年。过去的一年，虽然忙碌，但也收获不少。如果一定要说一些年度关键词，那就是「学分与课程」、「百度实习」以及「校招」。
学分与课程 从去年的9月份到今年的五月初，忙碌的两个学期，选择修完了研究生的大部分课程，这样五月份以后就可以外出实习。总的来看，研究生的课程是本科课程的扩展与深入。比如《高级数据库》这门课，本科也开，所讲内容大部分是数据库基本知识，包括关系型数据库设计以及 SQL 语句优化。研究生阶段则更深入，更倾向于数据库读写性能分析，各种关系型数据库横向对比，动手实践特殊类型的数据库设计，当然也包括对非关系型数据库的探讨。其他课程与此类似，包括高级网络、分布式设计与分析、数据挖掘与知识发现等等，基本上覆盖了计算机相关专业的主要课程。也利用研一空闲时间，复习了数据结构和算法，刷 LeetCode，填本科阶段挖下的坑。到五月份主要课程都已修完，貌似还多修了两门课。研究生的成绩普遍较高，平均分达到了90分左右（现在才意识到了要好好学习，哈哈～）。研究生阶段还有一门研讨课，不过我选的研讨课自己不是特别感兴趣，所以也没有花太多的时间在上面，水水而已。
百度实习 关于今年的实习，本来想专门写一篇文章总结一下，后来由于找工作忙碌就搁置了（其实都是借口），这里就简单总结一下。今年4月末拿到百度网页搜索部的实习Offer，之前听说百度实习基本能留下正式工作，但是当时选择去百度实习的原因不是想拿百度的正式 Offer，而是想去体验一下国内顶级的互联网公司，同时也增加自己的项目经验，为下半年的找工作打下基础。先说说面试吧，百度的实习面试分为两轮技术面，HR 都会跟你预约面试时间，这一点还是非常赞的。第一轮面试的大部分是基础数据结构与算法，当然也问了一些关于 C++ 的问题，比较轻松。第二轮面试就比较开放了，当时我的面试官就是后来我实习的 mentor，问题不是特别多，第一个是操作系统内存管理的，接下来，问了我对于 MySQL 的认识，包括 MySQL 读写极限的多少，以及底层一些读写机制等等，最后就是一道算法题，自己回答的不是很好。不过还好，大约一周以后，就收到了 Offer。 接下来正式入职，在百度网页搜索部，我所在的组在上海有4个研发，主要负责抓取工作，包括百度搜索的抓取以及其他各个产品线的抓取。百度为了规范公司各个产品线的抓取，避免不必要的封禁和抓取混乱的现状，特意将抓取平台化，命名为 CSPUB，公司内部各个产品线可以在 CSPUB 上注册，编辑抓取目标然后发起抓取。主要的开发语言是 C++ 和 PHP，自己平时也用 Python 写一些脚本检测线上机器的运行状况。百度确实是个年轻有活力的公司，内部员工干活都很积极，对新技术热情很高，部门内部经常会有一些技术分享，可以学到不少在学校根本不会接触到的架构知识。我的 mentor 是个对工作效率追求极致的人，一度使我感觉跟不上节奏，后来习惯了之后才发现自己受益颇多。到了10月份，由于开始找工作，自己也没有留上海的想法，遂辞职，返校找工作。
校园招聘 今年最重要的事情应该就是找工作了，可就是这最重要的事儿，我却刚开始就错过了一次绝佳的机会－阿里校招。不过阿里今年的校招也是让人不能理解，9月份之前就开始笔试，而且是线上笔试。我笔试当天晚上才得知消息，为时已晚。不过我对于自己在哪里工作找已有想法，因为女朋友的缘故，我会优先选择回西安工作。所以，当周围的同学都在准备 BAT 面试的时候，我在关注西安为数不多的 IT 公司校招情况。机缘巧合，之前发给 IBM 西安的简历被筛选了，HR 安排我去公司笔试和面试。接下来的一周我在西安参加了笔试一次面试三次，虽然 HR 说十一之后才会有消息，但当时感觉应该十拿九稳了。不出意料，回到南京之后，面试我的 Manager 通过电话给了口头 offer，薪水也还可以，再加上之前有在 IBM 的实习经历，应聘职位也和自己的方向比较相关，再次考虑到在西安 IT 行业不景气的现状，所以也基本定下来了。当然，这时候还没到十月份，校招才刚开始，所以也准备了其他公司的笔试面试，包括百度、大众点评以及一些小公司。其中百度和大众点评都拿到 Offer。在西安呆的一周内错过了腾讯、美团的校招。进入11月份基本周围同学都拿到 Offer，校招也应该结束了。总的来说，校招没必要很纠结，没必要各个公司招聘都参加，那要只会心力交瘁。想清楚自己适合什么样的公司，决定去哪个城市发展，这样自己目标就明确多了，准备起来也有条不紊，自然结果也不会很差。
新一年的愿望 希望将愿望写出来，能够更加有动力去实现。
希望抓住最后的校园时光，感谢所有的老师，和最好的哥们儿好好告别； 希望公司入职能去好的team，找到nice的mentor，做自己想做的事情； 希望能抽出更多的时间看书，不管是技术方面的书籍还是人文历史方面的； 希望能学点设计方面的知识，尤其是UI，UX方面的； 希望在工作中锻炼自己的口语，再不要吃老本； 希望多多参与开源的项目，保持博客更新的频率； 希望能多陪陪家人出去旅游。</description></item><item><title>IBM 实习总结</title><link>https://morven.life/posts/internship-at-ibm/</link><pubDate>Mon, 01 Apr 2013 00:00:00 +0000</pubDate><guid>https://morven.life/posts/internship-at-ibm/</guid><description>今天上午和新来的实习生交接了自己的工作，中午约同事们一起吃了午饭，之后很快办完了离职手续，自己为期6个多月的 IBM 实习也画上了句号，不管是不是完美，对于我自己来说，大学四年的第一份实习无疑对我价值颇高。这篇文章我主要说说我在 IBM 的实习经历以及感受。
实习时间 我出去实习的时间比较晚，根据学院规定暑假就可以开实习，时间不能少于6个月，所以最好应该在4、5月份找实习，而我在4、5月份却忙于备考 GRE 和 Toefl，自然也错过了找实习的黄金时间。暑假结束后，我才开始计划找实习。开始一心想着去互联网公司，也正因为一直在等待这样的机会而浪费了不少时间。直达9月份，刷小百合的时候看到一个不错的实习机会，也就是接下来6个多月我所在的 IBM 上海的 JTC(Java Technology Center) 部门。当时心动的主要原因是这个实习职位所在的组是做 JVM 的，也是自己的兴趣方向，所以果断投了简历。
面试 IBM 的面试分为技术面和英文面，可能当时急缺实习生，所以面试安排得很紧凑。自己也比较幸运，因为组里有已经毕业的学长 Ray，多少会有加分：）。因为是 JVM 小组，所以技术面都是关于 Java 的，比如 Java 多线程、IO、容器类以及反射机制等，没有问算法题。现在回想起来，这些知识确实在每天的实习工作中都会有所接触。接下来是英文面，主要面试口语。因为是招聘实习生，所以也没有太高的要求，基本的听说读写熟练就没有问题。最后面试官问我有没有问题想问他，我进一步问了关于实习职位的工作内容，当时的面试官，也就是后来我的 mentor，人非常 nice，blabla&amp;hellip;讲了一大堆，虽然当时也不是很懂，但真心觉得很 NB。过了一个周左右，收到面试通过的邮件，几天后搭乘了去上海的动车，开始了我的 IBM 实习。
工作环境 IBM 的工作环境很不错，整个办公室是个很大的开放式的环境，整个部门，从部门老大、到 Manager、到实习生都在开放式的工作区里面工作。我刚去的时候领到了一台旧电脑，是的，实习生用的都是旧电脑，不多这也完全不影响开发，因为基本的开发测试都是在云端，通过 SSH 登录到云端 Linux 环境。也正是从这开始彻底喜欢上了 unix/linux 哲学：
simple and beautiful
对于习惯了 IDE 开发的我一开始会有些不适应，不过后来发现在 Terminal 下工作效率丝毫不逊于 IDE。
工作内容 IBM 比较注重基础性软件研发，特别在中国成立 CDL(China Development Lab)，我所在的部门 JTC 正是属于 CDL，而我所在的小组从事的是 JVM 的开发。IBM 自己研发的 J9VM 与 Oracle 研发的Hotspot VM 齐名，是两大主流的 JVM，为 IBM 许多 Java 产品提供支持，比如 WebSphere，以及一些开源的产品如 Apache Harmony。现在我们组的工作是与加拿大以及印度的同事合作，基于 J9VM 开发 Multitennancy JVM，通过在单一的多租户 JVM 中运行多个应用程序，云系统可以加快应用程序的启动时间，并减少其内存占用。这将作为 IBM Java8 的一个新特性。因为是实习生，所以我的工作大多是于解决 Bug、性能调优以及测试相关。我的 mentor 是个技术大牛，我很庆幸能遇到这样的导师。mentor 对我的帮助不仅是技术上的提高，更多的是工作方式的改进，这些东西在学校的绝对学习不到的。</description></item></channel></rss>