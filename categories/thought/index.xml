<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>thought on Morven's Life</title><link>https://morven.life/categories/thought/</link><description>Recent content in thought on Morven's Life</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 31 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://morven.life/categories/thought/index.xml" rel="self" type="application/rss+xml"/><item><title>请回答「2020」</title><link>https://morven.life/posts/the_answer_of_2020/</link><pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate><guid>https://morven.life/posts/the_answer_of_2020/</guid><description>一眨眼2020年就要过去了，早知道不眨眼了……^^
依然记得12月初有人在朋友圈里发了这样一条状态更新：
“距离迈进2021剩下不够一个月！“
我当时在想，大家应该都对于2020年都已经不再抱有希望，不再发“12月请善待我”之类的状态，而是直接呼唤“2021年快来”。
但是，2020大事件的密度应该是前所未有的，我们的感官每天都被这这爆炸的信息量刷新着，如此魔幻的2020让我们见证了多少历史上的第一次。如果要为2020年做一个时间胶囊💊，里面应该放些什么？口罩？健康码？新冠疫苗？科比的球衣？打工人？内卷？月球土壤？……
听到了吗？2020的你，听到请回答。
真的要我回答的话，我的关键字会是「波折」。
早在1月份的时候，在美国的大舅就提醒我们要注意武汉流感的发展，当时觉得也没有什么，反正对于在家工作这件事情也早有心理准备，甚至对自己的“独处”经验过于自信，对于可以自由支配的时间从来都是安排得明明白白。没想到一语成鉴，疫情的发展远远超出预期。到了3月份初，国内基本很难抢购到口罩，甚至蔬菜水果也出现了供不应求的状况。于是，只能求助于大舅从美国及一批口罩回来。口罩寄到国内的时候已经到了4月份。
也正是那个时候开始，不争气的智齿开始发炎，情况逐渐开始恶化，每天晚上都感觉有个电钻一直在钻腮帮子，太阳穴扯着神经痛，疼到无法集中化注意力思考，当时的精神状态蔫到极点。但是当时因为疫情原因不方便跑去医院，于是咬着牙坚持到了6月，医生看到拍的片子之后都觉得难以相信我坚持了那么久，最终把掉智齿也就用了不到5分钟（介于画面过于血腥，图片就不放出来了），但是整个人终于解脱了出来，瞬间感觉风轻云快。
然而，就当我以为这一切就像新冠疫情开始好转的时候，没想到我就像礁石一样，被现实的巨浪一次次的拍打着。拔过智齿之后正好赶上另外一个产品组的第二季度发布。这里有一些背景需要解释一下，我们组运所有的Cloud产品已经率先全面拥抱Operator模式，也开始使用OLM(Operator Lifecycle Manager)与我们自研的ODLM(Operand Deployment Lifecycle Manager)来管理Cloud产品的生命周期。这是一个非常重要的新特性，这意味着所有依赖于我们Cloud产品的上层产品都必须遵循相同的模式。于是我被临时抽调过去辅助他们完成这个版本。本来以为不会太艰难，但是他们产品组的混乱程度远超我的预期，6月份的产品发布被拖到7月底。在这期间打破了我在IBM最大的加班记录，产品upload的前几天我后背开始出现过敏症状，我咬着牙坚持到了产品正式GA后的第一个周末去医院检查，才发现自己的了过敏性皮炎。
说实话，我此前一直对于自己的身体状态很有自信，周末高强度的打几个小时的球都轻轻松松，每天的运动量不够不会上床休息，虽然偶尔饮食不规律，但从来没有出现过如此疲惫不堪的状况。现在，我要开始认真思考如何“养生”，到了这个年纪，是不是喝啤酒、吃冰淇淋都想放两粒枸杞[旺柴][旺柴]。
回到工作，今年能够参与开源社区的时间明显便少了很多，这从我的github提交墙就可以看出来。
原因主要是公司产品策略的变化，我自己也要跟着调整，以前注重的开源方向被挤压的基本没有了空间。这直接导致我在istio社区的活跃度明显降低，去年基本可以全勤参加istio社区ENV WG的夏令时周会，今年参加的次数屈指可数。但是，我也花时间接触了不少开源项目，包括迁移并成规模的开始应用Kubernetes原生的CICD系统Prow，接管全部的IBM Cloud Platform Common Services开源项目与部分IBM MCM开源项目的构建流水线，同时增加了Prow的多平台能力使之适应IBM的Cloud产品的构建。项目的源代码以及配置托管在Github上面，详情请到传送门：https://github.com/IBM/test-infra 另外，年中的时候因为另外一个产品组的需求，使得我有机会深入了解Kong API网关的功能与实现，还有它与其他API网管的区别，我甚至开始调研了一段时间k8s生态圈内的各种主流API网管的应用场景与实现细节区别，但是不久便被叫停。
2020年，光怪陆离，有人见尘埃，有人见星辰，虽然这一年之于我始终都是乱糟糟的，自己好像什么也没做好，尤其在这兵荒马乱的12月。但是新的转机已经暂露头角，希望这2020年所有的鸡毛蒜皮换成2021年的风和日丽。最后，以一句话祝福自己能在2021年“牛”转乾坤：
前路浩浩荡荡，万物皆可期待</description></item><item><title>我的「2019」</title><link>https://morven.life/posts/the_year_of_2019/</link><pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate><guid>https://morven.life/posts/the_year_of_2019/</guid><description>TL;DR 最近我发现自己对于思考和记录的欲望在慢慢消亡，这是件很令我沮丧的事情。“少愤怒而多思考”的人设正在崩塌，我在向着自己厌恶的方向衍化，附和着，愤怒着，可一旦冷却翻篇之后，又恢复到若无其事的状态。归根结底，我没有以前那么坚定了，对「自我」的认同感逐渐淡化，开始被生活的惯性驱动，不去思考为什么，一旦开始随波逐流，就会发现一切原来这么轻松。但始终，我发现自己对于放飞自己充满惶恐，尤其是在进入到放纵之后的“贤者模式”的时候。与其被这种循环往复的矛盾折磨，不如投入到工作当中，至少不会有失落感。所以，这一年我基本放弃“抵抗”，避免思考为什么，开始享受这一年加速的节奏。
是告别也是开始 这一年注定是个说再见的一年，作为一个影迷，这个时代的我们也是幸运的，因为我们有着共同的记忆，漫威宇宙；有时候你会感慨十年真的很短，弹指一挥间，反过来想想，终局之战是集结，是重聚，但也是新时代的开始。这一年我们愤怒，声讨 HBO ，我们会怀念狼家的孩子流离失所的模样，我们期待龙妈身披铠甲力挽狂澜的终章，“问君能有几多愁，恰似六季过后无权游”。但是我们也会惊叹 HBO 用一种阴冷，克制却令人毛骨悚然的方式将切尔诺贝利的悲鸣呈现出来，它时刻提醒着对于自然与规律，我们始终应该保持敬畏之心。这个时代的我们注定是怀旧的，我们怀念 Queen ，怀念佛雷迪，遗憾我们没有亲身经历那段充满爱、痛苦和接纳的音乐之旅；我们想以一部《爱尔兰人》重温当年风华正茂的阿尔帕西诺、德尼罗与乔·佩西共同演绎的黑帮传奇；我们想象着上世纪六七十年代风起云涌的好莱坞，光怪陆离的电影中的电影往事；我们在菲尼克斯肆意癫狂的小丑表演中看 DC 如何在后黑暗骑士时代重新扳回一局；
当然，2019年我的光影之旅里面也不乏优秀的华语电影。我看到了哪吒的横空出世，《流浪地球》的荡气回肠，《少年的你》的真实无助；好的影视剧也层出不穷，《我们与恶的距离》让我学会重新审视现实，《长安十二时辰》让我领略盛世长安美景的同时也赞叹古人的理想抱负；甚至一些精彩的华语综艺也开始摆脱刻板印象，突出重围，《乐队的夏天》让我享受音乐的同时开始尊重摇滚；《圆桌派》继续教我如何做一个人畜无害的空巢老人；《奇葩说》继续满足着我围观不怕事儿大的幻想。
每一颗苹果都值得被偷吃。
这一年还有很多没有提及的书影剧，它们不只是茶余饭后的谈资，甚至是我迷茫低落时的一颗启明星。很期待在新的一年我有幸见证更多优秀影视剧的诞生。
一些小小的成就 回顾过去一年，工作上取得了一些小的进步，除了不断完善基础网络层技术栈，也更加深入地钻研了 Istio 以及 Envoy 。之前不断横向地扩展自己的知识领域，却没有用心向下深入探索，导致面对很多技术话题都可以侃侃而谈，可是遇到实际问题的时候无处下手。于是干脆从现实案例出发，在多耦合的复杂环境中练级打怪。
上半年处于持续的三线程并发工作状态，一方面完成正常也是份内的 ICP 常规开发任务，另一方面帮助在客户在生产环境实施 Istio ，同时，还要在 Istio 社区推动开源产品的不断演进。
由于工作资源变动，年中有一段时间在 Kubernetes-Sig 社区参与开发 [cluster-api] (https://github.com/kubernetes-sigs/cluster-api)，参与周期并不是很长，很多问题并没有深入研究，只是总体上对以云原生的方式管理 k8s 集群的生命周期有了新的认识。
九月初开始深入调研 k8s 原生的 CICD 利器 Prow ，并将部分项目从 Travis 迁移到 Prow ，使用 Prow 的好处除了可充分利用 k8s 自身的编排监控功能管理 CICD 流水线之外，它还提供了各种插件完成传统 CICD 工具（如 Travis, CirleCI 等）没有的命令式自动化工具，对于 k8s 原生项目尤其友好。
这一年马不停蹄，但仔细想想收获也确实不少，一方面虽然过程曲折，但最终还是帮助客户完成了将 Istio 投入生产环境中，虽然规模不是很大；另一方面，花费了大量时间参与到社区 Istio 的开发与讨论中，从 1.1 到 1.4 ，保证了之前社区承诺的每三个月的大版本顺利更新，当然，最最重要的是，使得 Istio 1.</description></item><item><title>Istio的前世今生</title><link>https://morven.life/posts/the_history_of_istio/</link><pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate><guid>https://morven.life/posts/the_history_of_istio/</guid><description>其实要彻底了解Istio以及服务网格出现的背景，就得从计算机发展的早期说起。
下面这张图展示的的通信模型变种其实从计算机刚出现不久的上世纪50年代开始就得到广泛应用，那个时候，计算机很稀有，也很昂贵，人们手动管理计算机之间的连接，图中绿色的网络栈底层只负责传输电子信号和字节码：
随着计算机变得越来越普及，价格也没那么贵了，计算机之间的连接数量和通信的数据量出现了疯狂式的增长，人们越来越依赖网络系统，工程师们必须确保他们开发的服务能够满足用户的要求。于是，如何提升系统质量成为人们关注的焦点。机器需要知道如何找到其他节点，处理同一个通道上的并发连接，与非直接连接的机器发生通信，通过网络路由数据包，加密流量……除此之外，还需要流量控制机制，流量控制可以防止下游服务器给上游服务器发送过多的数据包。
于是，在一段时期内，开发人员需要在自己的代码里处理上述问题。在下面这张图的示例中，为了确保下游服务器不给其他上游服务造成过载，应用程序需要处理流量控制逻辑，于是网络中的流量控制逻辑和业务逻辑就混杂在一起：
幸运的是，上世纪60年代末，TCP/IP协议栈的出现解决了可靠传输和流量控制等问题，此后尽管网络逻辑代码依然存在，但已经从应用程序里抽离出来，成为操作系统网络栈的一部分，工程师只需要按照操作系统的调用接口进行编程就可以解决基础的网络传输问题：
进入21世纪，计算机越来越普及，也越来越便宜，相互连接的计算机节点越来越多，业界出现了各种网络系统，如分布式代理和面向服务架构(SOA)：
分布式为我们带来了更高层次的能力和好处，但却带来了新的挑战。这时候工程师的重心开始转移到应用程序的网络功能上面，这时候的服务之间的对话以“消息”为传输单元，当工程师们通过网络进行调用服务时，必须能为应用程序消息执行超时、重试、确认等操作。
于是，有工程师是开始尝试使用消息主干网（messaging backbone）集中式地来提供、控制应用程序网络功能，如服务发现、负载均衡、重试等等，甚至，比如协议调解、消息转换、消息路由、编排等功能，因为他们觉得如果可以将这些看似同一层面的内容加入到基础设施中，应用程序或许会更轻量、更精简、更敏捷等等。这些需求绝对是真实的，ESB(Enterprise Service Bus)演变并满足了这些需要。ESB在是2005年被提出的，它的概念特别类似于计算机硬件概念里的USB, USB作为电脑中的标准扩展接口，可以连接各种外部设备；而ESB则就把路由管理、协议转换、策略控制等通用应用程序网络功能加到现有的集中式消息总线里：
这看似行得通！
可是，在实施SOA架构的时候，工程师们发现这种架构有点儿用力过度，矫枉过正了。集中式的消息总线往往会成为架构的瓶颈，用它来进行流量控制、路由、策略执行等并不像我们想象那么容易。加上组织结构过于复杂，使用专有格式（XML等），需要业务逻辑需要实现路由转换和编排等功能，各个服务之间耦合度很高，在敏捷运动的时代背景下，ESB架构已经无法跟上时代的节奏了。
在接下来的几年内，REST革命和API优先的思潮孕育了微服务架构应用，而以docker为代表的容器技术和以Kubernetes为代表的容器编排技术的出现促进了微服务架构的落地。事实上，微服务时代可以以Kubernetes的出现节点划分为“前微服务时代”和“后微服务时代”：
“前微服务时代”基本上是微服务作为用例推动容器技术的发展，而到“后微服务时代”，特别是成为标准的Kubernetes其实在驱动和重新定义微服务的最佳实践，容器和Kubernetes为微服务架构的落地提供了绝佳的客观条件。
微服务架构有很多好处，比如：
快速分配计算资源 快速部署升级迭代 易于分配的存储 易于访问的边界等等 但是作为较复杂的分布式系统，微服务架构给运维带来了新的挑战。当工程师开始接尝试微服务架构，必须考虑如何进行微服务治理。狭义的微服务治理，关注的是微服务组件之间的连接与通讯，例如服务注册发现、东西向路由流控、负载均衡、熔断降级、遥测追踪等。
历史总是惊人的相似，第一批采用微服务架构的企业遵循的是与第一代网络计算机系统类似的策略，也就是说，解决网络通信问题的任务又落在了业务工程师的肩上。
这个时候出现了看到诸如Netflix OSS堆栈、Twitter Finagle以及赫赫有名的Spring Cloud这样的框架和类库帮助业务工程师快速开发应用程序级别的网路功能，只需要写少量代码，就可以把服务发现，负载均衡，路由管理，遥测收集，监控告警等这些功能实现：
但是如果仔细想一下的话，就会发现这样编写微服务程序的问题很明显。
这些类库或者框架是特定语言编写的，并且混合在业务逻辑中（或在整个基础设施上层分散的业务逻辑中）。姑且不说类库和框架的学习成本和门槛，我们知道微服务架构问世的一个承诺就是不同的微服务可以采用不同的编程语言来编写，可是当你开始编写代码的时候会发现有些语言还没有提供对应的类库。这是一个尴尬的局面！这个问题非常尖锐，为了解决这个问题，大公司通常选择就是统一编程语言来编写微服务代码另外的问题是，升级怎么办？框架不可能一开始就完美无缺，所有功能都齐备，没有任何BUG。升级一般都是逐个版本递进升级，一旦出现客户端和服务器端版本不一致，就要小心维护兼容性。实际上，每做出一次变更都需要进行集成、测试，还要重新部署所有的服务——尽管服务本身并没有发生变化。
与网络协议栈一样，工程师们急切地希望能够将分布式服务所需要的一些特性放到底层的平台中。这就像工程师基于HTTP协议开发非常复杂的应用，无需关心底层TCP如何控制数据包。在开发微服务时也是类似的，业务工程师们聚焦在业务逻辑上，不需要浪费时间去编写服务基础设施代码或管理系统用到的软件库和框架。把这种想法囊括到之前架构中，就是下边这幅图所示的样子：
不过，在网络协议栈中加入这样的一个层是不实际的。貌似可以尝试一下代理的方案！事实上，确实有有一些先驱者，尝试过使用代理的方案，例如nginx，haproxy，proxygen等代理。也就是说，一个服务不会直接与上游服务发生连接，所有的流量都会流经代理，代理会拦截服务之间的请求并转发到上游服务。可是，那时候代理的功能非常简陋，很多工程师尝试之后觉得没有办法实现服务的客户端所有的需求。
在这样的诉求下，第一代的Sidecar出现了，Sidecar扮演的角色和代理很像，但是功能就齐全很多，基本上原来微服务框架在客户端实现的功能都会有对应的实现：
但是第一代的sidecar有一个重要的限制，它们是专门为特定基础设施组件而设计的，导致无法通用。例如，Airbnb的Nerve和Synapse，它们工作的基础是服务一定是注册到ZooKeeper上的，而Netflix的Prana要求一定要使用Netflix自己的Eureka注册服务&amp;hellip;
随着微服务架构日渐流行，新一波的sidecar出现了，可以用在不同基础设施组件上，我们把他们叫做通用型的sidecar。其中Linkerd是业界第一个通用型sidecar，它是基于Twitter微服务平台而开发的，实际上也正是它创造了Service Mesh，即服务网格的概念。2016年1月15日，Linkerd 0.0.7版本发布，随后加入CNCF，1.0版本于2017年4月份发布；随后的通用型sidecar就是大名鼎鼎来自于Lyft的envoy，Lyft在2016年9月发布envoy的1.0版本之后。2017年9月envoy加入CNCF；最后一个比较新的sidecar来自于我们熟悉的NGINX，叫做Nginmesh，2017年9月发布了第一个版本。
有了通用型sidecar，每个微服务都会有一个sidecar代理与之配对，服务间通信都是通过sidecar代理进行的。正如我们在下这幅图上看到的那样，sidecar代理之间的连接形成了一种网格网络：
这就是服务网格概念的来源，下面是服务网格概念地官方定义，它不再把sidecar代理看成单独的组件，并强调了这些sidecar代理所形成的网络的重要性。
A service mesh is a dedicated infrastructure layer for making service-to-service communication safe, fast, and reliable.</description></item><item><title>重拾少年时期的「信仰」</title><link>https://morven.life/posts/the_summary_of_2018/</link><pubDate>Fri, 28 Dec 2018 00:00:00 +0000</pubDate><guid>https://morven.life/posts/the_summary_of_2018/</guid><description>不必太纠结于当下，也不必太忧虑未来，当你经历过一些事情的时候，眼前的风景已经和从前不一样了。
窗外的霓虹灯让我有点儿走神，在下高铁回家的出租车上，我被出租车司机套路了年龄。本来以为他会说看起来这么年轻之类的客套话，但是他接下来说的话让我有点儿猝不及防！
快三十岁的人了，该娶媳妇儿了！
我一时不知道该怎么回复，陷入了沉思。我到底还年轻吗？这个问题也许在半年前我会毫不犹豫的回答，我当然年轻，我还没有闯出什么名堂，怎么可能变老呢？但是现在呢？我有点儿心虚！出租车在一路飘红的二环边上缓缓挪动，走走停停，恍恍惚惚中，我的大脑开始浮现出那个我难以接受的事实：我真的老了。
一直以来，作为家里最小的，我一直拥有简单的信仰，就是去做一个优秀的人，让所有人夸赞；我有自己的“偶像”，追赶成为他的步伐甚至成了我少年时期的生活主旋律。虽然及其功利的信仰不值一提，真是肤浅至极，但是日子过得很纯粹，为因为小小的成就而高兴好几天，也会为偶然的失利懊恼而睡不着觉。总之就是时刻想证明自己，所有的这一切感觉都是理所当然，心中时刻提醒自己不要辜负每个关心自己的人。
然而，成长就是一个摸石头过河的过程，尤其对于我这个出身普通家庭的人来说。一路磕磕绊绊，我开始质问为什么大人们都在做自己认为不对的事情而心照不宣，到底是该回归初心还是随波逐流？俨然，少年时的单纯开始出现裂痕，天平开始向另外一端倾斜，甚至开始影响自己的日常生活，在人生的重要十字路口开始犹犹豫豫，不知所措！这个时候我多么希望有一位看穿一切的长者给我指导？然而，这场源自于内心的混乱，终究只能在内心寻找答案。有时候连续好几个月，我在想如果不离开自己这种舒适的环境，如果不能给自己规划未来的出路，我就无法成为自己欣赏的人。然而自己终究没有那种魄力，有时候这样的纠结让我几度抑郁，同时也时刻提醒自己，简简单单没心没肺不也挺好！
我其实很清楚这种执念会将自己带完何处？固执，腐败，糜烂！我要放下哪些愚蠢的想法，重新认识自己，不去思考为什么？踏踏实实做好每一件事情，享受小成就带给自己的快感。虽然我又一次以为我找到了事物的真相，但是在这个片刻，我似乎看大了少年时代的自己，我是心满意足的。
所以最终2018年的年底，我要结束了这种纠结的状态，把自己重新放到“野外”，用一种新的视角去看自己，看世界。去按照自己希望的方式，改造自己，做一次升级。
因此，在2019年，我要更高效的提升自己的能力，做更多具备稀缺性和自我认同的事情，重拾少年时期的「信仰」！</description></item><item><title>又是冬至日</title><link>https://morven.life/posts/thoughts_in_winter_solstice/</link><pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate><guid>https://morven.life/posts/thoughts_in_winter_solstice/</guid><description>冬至已到，也该向2017告别了。
最近酝酿着写写2017年，但到真正提笔的时候却无从下手。2017年，我一直很努力，却总是停留在原地。该离开的终究没有留下来，该坚持的还是半途而废。
2017发生了很多事，心情一直处于低谷，时常在深邃的夜晚开始怀疑自己当初的选择。理想、信念和情感&amp;hellip;所有种种陪伴了自己青春岁月的精神支撑，在这冰冷冷的，麻木的，毫无人性的现实世界里显得沧桑而无力。可能是自己过于“玻璃心”，也经常被周围的人添加“不成熟”的标签。
不是我无法承受现实世界的洗礼，我只是想按照自己的方式来生活。仔细想想，这些年虽然变化不少，但自己始终是个理想主义斗士。
以前的我有自己的原则，却没有太多的阅历，此外，行动力也不太够，但是仍然对这个世界充满向往。 而现在的我，却因为短期内见过太多社会的黑暗面，变得无法坚持自己的信念而愤世嫉俗，因为我内心的良知始终让我无法和这个美好而丑陋的世界和解。
我在无数个夜晚想象着拥有一台时光机器，带着自己回到过去，用一种对世界纯粹的热情感染早已麻木的自己，提醒自己世界上还有正义，原则还有信念等一众美好的东西。
在接下来的时间内，我期待用自己的经历和行动力，告诫尚处于十字路口的自己坚定内心的选择，而不是在理想的分崩离析中不断回味那些外表逐渐模糊但内在却深入骨髓而不能磨灭的印记。
不管2017年对我来说是多么 tough 的一年，毫无疑问，它也将会成为我永远都铭记和感恩的一年。
希望在即将到来的2018年里，不要再掉进自己思想的漩涡里，重新拿回了生活的主导权，不忘初心，坚持梦想。
人生几回仿往事，山形依旧枕寒流。 ——刘禹锡《西塞山怀志》</description></item><item><title>十年，火影</title><link>https://morven.life/posts/ten-years-for-naruto/</link><pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate><guid>https://morven.life/posts/ten-years-for-naruto/</guid><description>去年听到火影忍者漫画完结的时候，心里是极其复杂的。急于见证万年吊车尾主人公鸣人的结局，却更多地是对于十年青春陪伴的不舍。
第一次见到火影是一个黄头发中二少年踩着树杈飞来飞去，身后跟着几个小屁孩嘴里大叫着佐助。当时觉得这种需要按着牛顿棺材板才能看的动漫实在无聊，但是正值高中紧张复习期间，偶尔用MP4从同学那里拷几集看来缓减一下压力。
对火影路转粉应该是在“复制忍者”旗木卡卡西与原雾隐村“忍刀七人众”之一桃地再不斩天桥决战。当时和几个小伙伴周末躲在教室偷用多媒体反复播放那几集，俨然被各种各样的结印手势以及高潮迭起的热血剧情吸引得神魂颠倒。一方是年仅12岁时就成为上忍木叶天才旗木卡卡西，加上可以复制了上千种忍术的开挂写轮眼；另一方是雾隐村“忍刀七人众”之一，无声杀人术技巧之高超的“鬼人”桃地再不斩。两人实力相近，却有着不同的目标，经过几番焦灼战斗，最后在漫天的飞雪中，当再不斩死在白的身边时，流着泪说道：“如果可以的话，真想和你去同一个地方。”，而与此同时，一颗雪花的结晶则因为白刚刚死去时残留的体温而在白的眼角融化流下，仿佛印证了再不斩那句“白，是你在哭泣么？”，再配上背景音乐——钢琴版“Sadness and Sorrow”，​最终，这成为火影里最初也是最让人感动以及震撼的画面。
其实，火影的战斗场景非常丰富，除了高速飞行和冲刺、拳脚过招、立体镜头、火焰爆发等，还会有很多战斗的细节与伏笔。超燃的热血剧情加上富有逻辑性的战斗场景设计完全让高中时期的我们进入了节奏。随着剧情的展开，久而久之，开始对“万年吊车尾”鸣人的未来越来越感兴趣。漩涡鸣人，见证了白心甘情愿为再不斩牺牲，感同身受地与我爱罗诉说着相同的过去，将佐助视为最重要的羁绊，为了对小樱的承诺，拼尽全力追回佐助，独自练习着更强的忍术，为自己的父母深深地感到骄傲，更想用爱感化九尾，他所经历的一切，都为他贯彻自己的忍道。正是印证了鼬所说的“不是当上火影的人才能得到认可，只有得到大家的认可才能当上火影”。
其实不止主人公，火影里面每个人物都是栩栩如生。 实力又神秘，帅气又低调，漫不经心又可靠，冷酷中还有温暖的天才忍者旗木卡卡西。 高冷而睿智，隐秘而伟大，残忍却温柔，怀揣光明于黑暗中独自行走的最完美忍者宇智波鼬。 猥琐好色而真性情，荒诞不羁却坚韧刚强，洒脱随和而正气凛然，推动整个火影进程的自来也老师。 &amp;hellip;
我想火影完结对我来说不是件过于悲伤的事，尽管那天听到消息的我真的有种不可填补的缺失感，但是关于鸣人的故事暂时告一段落，但新的故事还在延续，更何况我们还有高梨康治大师级的音乐。每个人都有自己的人生，无论振作拼搏，还是颓废懈怠，时间终会带走一切，我们能留下的，只是种子，就像火影的种子早已埋在心底，何时发芽？也许明天，也许……就是现在。</description></item><item><title>毕业这两年</title><link>https://morven.life/posts/the-two-years-after-graduation/</link><pubDate>Tue, 20 Jun 2017 00:00:00 +0000</pubDate><guid>https://morven.life/posts/the-two-years-after-graduation/</guid><description>步入6月，一场青春的盛宴，如期而至，这场盛宴的主题，是毕业。我虽是这场盛宴之外的人，但看到微博上在校同学们的种种分享，仿佛是在提醒自己：你都毕业两年了！
是啊，我毕业都两年了！
想到这个，心中难免感慨万千，但是要谈谈这万千感慨，却又不知从何说起，真有一种情深而何以往之的感觉！
毕业这两年，让我渐渐感到陌生的，是自己。我似乎已经越来越不清楚自己是谁，越来越不知道该往何方。我时而追忆大学时代的那个自己，以寻求一点自我的慰藉。当慰藉醒来，我才猛然发现，和过去的自己相比，我当前的生命轨迹，正在不断下坡的过程。
大学时的那个我，总得而言，是一个乐于奉献、敢于担当的人。从大一入学之处欢呼雀跃，奔走于各个社团之间，到研究生逃离实验室，和几个“疯狂的哥们儿”没日没夜地呆在破烂不堪的创业楼里编写爬虫系统，那时候感觉自己还能“输得起”，所以做什么事情都不惧困难，在别人看来那是“不务正业”，自己却乐此不彼。
但是从毕业到现在的这两年的工作经历，平平淡淡，没有输入，我不敢直视这是我自己。当然，并不是我现在的处境有多么的不堪，而是精神上“斗志泯灭”。回头看看那个曾经有着纯高理想追求，并定会为之奋斗的自己，如今正处于一种“望风披靡”，追求“息事宁人”的状态。
毕业这两年，我一直就职于同一家公司，两年前的今天，我期待着可以顺风顺水地“大干一番”，毕竟公司肯定期待纯粹的技术出生，坚持技术路线的新鲜血液。的确，我投入了极大的热情，也获得了良好的发展。但是由于某种原因，公司一直处于”不稳定期“，自己也努力适应公司公司的转变策略。这样的好处是很明显的，经过几次的变化，虽然职位再三调整，但自己已经适应公司工作环境，也接触了目前各个产品线上的研发同事，合作也非常愉快，显然，公司需要这样能跟着公司战略转变的员工。然而，经过几轮的变化，自己心态早已从之前的“主动学习”，“积极探索”转变到“随波追流”，追求“完成自己分内工作就行”。我不知道这种变化是一种普遍现象，还是我自己开始濒临堕落边缘。
对工作没有了开始时的热情，问题到底处在哪里？整个而言，我现在仍然处于一个迷茫期，前路漫漫，不知所以。
虽然很多的事还没有想清楚，但并不意味着活得糊涂。我这两年虽然让自己的一些有点沉寂了，但是很多东西，我依然在坚持。坚持对善的向往，坚持对独立人格的向往，坚持读书学习思考，时刻保持着对人生观与价值观的自信。暂时得不到太多，只能好好坚持一些自认为可贵的东西，唯有坚持，才有改变的可能。</description></item><item><title>后会无期，2016</title><link>https://morven.life/posts/farewell-2016/</link><pubDate>Sun, 18 Dec 2016 00:00:00 +0000</pubDate><guid>https://morven.life/posts/farewell-2016/</guid><description>2016年，很长又很短。 大学毕业，拼命折腾。 概括起来，三言两语便是全部，往细里谈，三天三夜也不够。 但我还是要写，有些情感，只能用文字表达，有些思考，在笔尖之下才会刻骨铭心。
生活 从参加工作到现在，差不多一年多了。这期间的大部分时间我都一个人住着。每天早上睡到自然醒，洗脸刷牙，心情好楼下买个早点，然后悠哉悠哉地走到公司。下班不用急着回家，独自呆在电脑前听听歌，看看书。肚子饿的时候去公司周围吃个晚饭，然后沿着公园慢慢哟哟地走回家，天气好的话去公园旁边的球场打打球。回到家后，洗完澡看看书，刷会儿知乎，偶尔来个葛优瘫追追美剧。平时要是有人约个饭局的话就跟几个关系不错的哥们儿一起吃个饭，然后各回各家。
我这人不太合群，不喜欢热闹。除了碍于情面上的应酬，大多时候我都喜欢一个人呆着。我比较享受这种独自生活的状态。看书，听歌，看电影，玩手机，或者沏一杯茶然后发呆愣神的呆着，我都很喜欢。下半年开始，星巴克成为我出没的第三场所-公司、家之外最好的选择。经常在星巴克看到聋哑人的聚会，围成一桌用手语沟通，还看到过织毛衣的女人，都觉得蛮温暖的。我有时会点杯喝的打开笔电戴着耳机一坐一下午甚至一整天。我始终都觉得，只有当一个人的时候，才能听到自己内心的声音，才有一个好的状态去想明白一些事情。外界纷扰反而会容易让人失去判断和自我意识。
工作 一直在思考，自己到底适合做什么样的开发岗位。从大学本科阶段的被动接受计算机知识的阶段，到研究生期间主动涉猎计算机各方面知识，从最初的汇编语言与C，到面向对象语言，再到函数式编程，从小型单片机与操作系统到大型分布式系统缓存／并发的设计与实现。我一直没有停止学习，总想着扩展自己的技术栈，打造枝繁叶茂的技能树，却没有沉下心去专攻某项技能。总关注于横向领域的扩充，却忽略技能纵向深度的延伸。
从这方面来讲，2016年确实是等待以及转身的重要节点。因为经历多次工作角色的转变，终于找到最适合自己的工作方向。说实话，之前没有想过自己会从事前端开发，毕竟发展速度太快，每天都有新的轮子出现，难免不会迷失在其中。但是真正接过这个角色之后，就不要想那么多，我才27岁又不是72岁，既然入了这一行，就要有这一行的“匠人”精神。说实话，我一直也没认为IT这一行多么了不起，我们从事这一行只不过是个普通的“手艺人”，经历多年打磨自己的大脑，只有足够优秀才能制作出好的作品。但也正是因为如此，我们可以尽情发挥自己的创意。
从2016年4月开始，开始弥补自己前段领域的空白：从HTML到Jade，从CSS到Less／Sass，从Javascript到Typescript，从jQuery到Angular，从Grunt到Webpack&amp;hellip;虽然自己之前也略有涉猎前端知识，但对完整的前端技术栈知识略知皮毛。从最初的简单地写写页面到现在轻松构建整个项目框架，偶尔写个‘轮子’提供产品的个性化需求解决方案。回过头来看，这一年一路走来，发现自己的兴趣所在，沉下心去思考，研究，虽然踩了很多坑，但也收获颇丰。现在大部分人对于前段的认识还停留在‘刀耕火种’的阶段，其实这几年前端领域的快速发展导致前端工程化已经成为不可逆转的趋势。
梦想 我们走再远，终归难违初心所在。
曾经的自己大部分时间都处于的奋斗的状态，放弃了生活的品质。如今独自生活后才发现，人一定要活在自己的气场里，才能做什么都舒心。埋头做事没什么不可，但久而久之生活里会充斥着现实的土腥味，偶尔跳出来做做自己喜欢的事，会让本就不好过的日子幸福很多。
最基本的作为自己必须培养一些爱好，必须做到一觉醒来清楚至少今天还能干什么。是去球场挥汗如雨？去找个知心老友唠嗑？还是制定一天内该吸收的知识？这些都行，自己必须做到积攒这种微小的期待和快乐，这样才不会被遥不可及的梦和无法掌控的爱给拖垮。
作为产品的创造者，总是梦想着有朝一日能有自己的优秀作品问世，自己设计，自己实现，自己运维。不期待能有成千上万的用户，不奢求能带来万贯的财富。所以，一直保持着一种虚心学习的态度，对自己、对产品。这是一个修炼的过程，若有懈怠或者失去警醒，就会距离创造伟大的产品，愈来愈远。
对2017年的展望 总的来说，2016年对我来说，还算满意。没有忘记自己的初心，也在不断获取想得到的东西，这比迷失自我的成功更难得吧。希望2017年继续保持这种状态，勿骄勿燥。
多接触移动端开发领域，不管是iOS还是Android 系统学习UI／UX方面的知识 参加些前端以及Design方面的线下聚会 多读些历史人文方面的书籍 保持健康的生活习惯 带着相机出去走走</description></item><item><title>Webpack 使用小结</title><link>https://morven.life/posts/the_webpack_summary/</link><pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate><guid>https://morven.life/posts/the_webpack_summary/</guid><description>分而治之是软件工程领域的重要思想，对于复杂度日益增加的前端也同样适用。一般前端团队选择合适的框架之后就要开始考虑开发维护的效率问题。而模块化是目前前端领域比较流行的分而治之手段。
javascript 模块化已经有很多规范和工具，例如 CommonJS/AMD/requireJS/CMD/ES6 Module ，在上篇文章中有详细的介绍。 CSS 模块化基本要依靠 Less , Sass 以及 Stylus 等于处理器的 import/minxin 特性实现。而 html 以及 html 模版和其他资源比如图片的模块化怎么去处理呢？
这也正是 webpack 要解决的问题之一。严格来说， webpack 是一个模块打包工具，它既不像 requireJS 和 seaJS 这样的模块加载器，也不像 grunt 和 gulp 这样优化前端开发流程的构建工具，像是两类工具的集合却又远不止如此。
总的来说， Webpack 是一个模块打包工具，它将 js 、 css 、 html 以及图片等都视为模块资源，这些模块资源必然存在某种依赖关系， webpack 就是通过静态分析各种模块文件之间的依赖关系，通过不同种类的 Loader 将所有模块打包成起来。
webpack VS gulp 严格来说， gulp 与 webpack 并没有可比性。 gulp 应该和 grunt 属于同一类工具，能够优化前端工作流程，比如压缩合并 js 、css ，预编译 typescript 、 sass 等。也就是说，我们可以根据需要配置插件，就可以将之前需要手动完成的任务自动化。 webpack 作为模块打包工具，可以和 browserify 相提并论，两者都是预编译模块化解决方案。相比 requireJS 、 seaJS 这类“在线”模块化方案更加智能。因为是“预编译”，所以不需要在浏览器中加载解释器。另外，你可以直接在本地编写 js ，不管是 AMD/CMD/ES6 风格的模块化，都编译成浏览器认识的 js 。</description></item><item><title>聊聊Pied Pier的压缩算法</title><link>https://morven.life/posts/the_data_compression_in_pied_pier/</link><pubDate>Sat, 18 Jun 2016 00:00:00 +0000</pubDate><guid>https://morven.life/posts/the_data_compression_in_pied_pier/</guid><description>最近终于追完了HBO的自制喜剧《硅谷》的第三季。《硅谷》算是一部非常小众的美剧了，主要讲述湾区几个IT男创业的故事，剧情并没有过多围绕他们怎么写代码，而是把关注点聚焦在创业想法的诞生以及初期公司的成立以及与风投斡旋的过程中的戏剧冲突上，让&amp;quot;内行人&amp;quot;啼笑皆非。每季的后几集都有点儿燃烧，原本“改变世界”之类现实中会被嘲讽的话，却是最能触动内心的！
《硅谷》之所以与众不同，还因为剧中的很多理论都是很值得推敲的。我们今天就来聊一聊《硅谷》S2E08中提出的Pied Pier基础核心算法的“middle-out”数据压缩算法。为了便于理解，我们先来了解一下数据压缩算法的基本原理、“信息熵”以及霍夫曼编码。
数据压缩的原理 数据压缩原理很简单，概括起来就是找到那些重复出现的数据，然后用用更短的符号替代，从而达到缩短数据大小的目的。
例如，我有一段文本&amp;quot;ABCDABCDABCDABCDABCDABCD&amp;quot;，显然我们使用&amp;quot;6ABCD&amp;quot;也能替代原来的数据，因为可以根据&amp;quot;7ABCD&amp;quot;推算出原文本&amp;quot;ABCDABCDABCDABCDABCDABCD&amp;quot;，数据从原来的“28”byte变成了“5”byte，数据压缩比为“5/24”约等于“20.8”。事实上，只要保证对应关系，可以用任意字符代替那些重复出现的字符串。这让我想到了现在移动互联网时代广泛使用的Emoji，我们可以使用一个简单的Emoji表情来表达原来需要多个字表达的意思。
本质上，所谓&amp;quot;压缩&amp;quot;就是找出文件数据内容的概率分布，将那些出现概率高的部分代替成更短的形式。所以，内容越是重复的文件，就可以压缩地越小。比如，&amp;ldquo;ABCDABCDABCDABCDABCDABCD&amp;quot;可以压缩成&amp;quot;6ABCD&amp;rdquo;。与之对应地，如果数据的内容毫无重复，就很难压缩。极端情况就是，遇到那些均匀分布的随机字符串，往往连一个字符都压缩不了。比如，任意排列的10个阿拉伯数字（5271839406），就是无法压缩的；再比如，无理数（比如π）也很难压缩。
总结一下，压缩就是消除冗余的过程，用更精简的形式表达相同的复杂内容。可以想象，压缩过一次以后，文件中的重复字符串将大幅减少。好的压缩算法，可以将冗余降到最低，以至于再也没有办法进一步压缩。所以，压缩已经压缩过的文件（递归压缩），通常是没有意义的。
数据压缩的极限 我们可以从数学上用反证法证明数据压缩是有极限的，也就是不可能无限压缩一份数据而保证内容不丢失。
假定任何文件都可以压缩到N个二进制位以内，那么最多有2N种不同的压缩结果。这就是说，如果有2N+1个文件，必然至少有两个文件会产生同样的压缩结果。这就意味着这两个文件不可能无损地还原。因此，得到证明，并非所有文件都可以压缩到N个二进制位以下。
N是一个基于压缩的数据确定的数字，我们很自然地想知道，这个N到底是多少？
按照我们前面的关于数据压缩的原理，我们知道数据压缩可以分解成两个步骤。
得到数据内容的概率分布，哪些部分出现的次数多，哪些部分出现的次数少 对数据内容进行编码，用较短的符号替代那些重复出现的部分 对于一封确定的数据文件来说，它的概率分布是确定的，不同的压缩算法主要是因为第二部编码方式的不同，最优的压缩算法，当然是最短的符号表示作为替代原数据内容。
我们使用数学归纳法来来演算一下N的值：
最简单的情况，我们要压缩的数据只有一部分；这一部分只有两个值，那么一个二进制数就可以表示；这一部分只有三个值，那么就需要两个二进制数来表示；这一部分有n个不同的值，那么就需要&amp;quot;log2(n)&amp;ldquo;个二进制位来表示； 假设在数据文件各个字符均匀出现的情况下，一个字符在某一部分中出现的概率是p，也就是说这一部分可能会出现1/p种不同的情况，那么，这一部分就需要至少&amp;quot;log2(1/p)&amp;ldquo;个二进制位来表示； 推广开来，如果文件有n个部分组成，每个部分的内容在文件中的出现概率分别为p1、p2、&amp;hellip;pn，那么替代符号占据的二进制最少为下面这个式子： log2(1/p1) + log2(1/p2) + ... + log2(1/pn)
= ∑ log2(1/pn)
这就是数据压缩的极限。
信息熵 有了前面得到的数据压缩极限的公式，很容易知道，对于n相等的两个文件，概率p决定了这个式子的大小。p越大，表明文件内容越有规律，压缩后的体积就越小；p越小，表明文件内容越随机，压缩后的体积就越大。
我们将之前的数据压缩的极限公式除以数据的组成部分，既可以得到平均每个符号所占用的二进制位，这样我们就可以很方便的比较不同大小的文件的压缩极限：
∑ log2(1/pn)/n
= log2(1/p1)/n + log2(1/p2)/n + ... + log2(1/pn)/n
更进一步，我们可以得到每个字符所占用的二进制位的数学期望：
p1*log2(1/p1) + p2*log2(1/p2) + ... + pn*log2(1/pn)
= ∑ pn*log2(1/pn)
= E( log2(1/p) )
结果是每个字符所占用的二进制位的数学期望等于概率倒数的对数的数学期望。</description></item><item><title>写在2015年年末</title><link>https://morven.life/posts/post_at_the_end_of_2015/</link><pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate><guid>https://morven.life/posts/post_at_the_end_of_2015/</guid><description>2015年马上就要过去了。一年一年是如此相似，一年一年却有如此不同。每到年底总想写点什么，算是给自己的一个总结、一个回忆、一个自我述说的快乐。 2015年像很多年份一样是平常的，按部就班地数着日子过去了，虽然忙碌，但收获颇多。2015年又是不平常的，因为2015年是我正式告别学校踏入&amp;quot;江湖&amp;quot;的第一年。2015年对我来说，关键字有驾证，毕业以及入职。
驾证 之前总是一拖再拖，这次真是没法再推了。于是拉了宿舍一哥们儿入坑，组团报名。银子花出去之后便有了动力。从科目一理论到科目二场地考，再到科目三大路考，每周一到周四5点多爬起来赶班车去驾校练车。中午赶回来吃过饭休息之后再去实验室赶论文。还好，全部都一把过，算是对自己的慰藉吧。那几个月下来，认识了很多学车的同学，大多是即将毕业离开南京的学生，而且还认识了个南艺学珠宝设计的妹子（坏笑&amp;hellip;）。那段日子也确实是痛并快乐着，导致拿到驾照之后得了学车后遗症，每天早上天还没亮就睡不着了。学车本不是什么难事儿，只要安排得到，拿到驾照还是挺容易的，也不用为了考试顺利而铤而走险，贿赂教练或考官。
毕业 又毕业了，这一次是真的毕业了。研究生毕业答辩明显比本科毕业答辩阶段严格得多，所以投入了更多的时间在论文上。庆幸自己有个好导师，选题也不错，所以答辩比较顺利。毕业典礼没有本科那么正式，辅导员只是选了一些同学去参加，毕业合影部分同学的脸也是p上去的。临近毕业那段时间各种手续要办，又是档案又是户口&amp;hellip;不过总能抽出时间和室友开黑。直到离校当晚，拉着行李箱准备走出鼓楼校区，走在广州路熙熙攘攘的人群中才知道，这次不是回家，这次真要离开了，下次再来不知道是什么时候了。
入职 毕业后回家休息不到一个月正式入职。入职前一周收到HR发给我的入职材料列表，发现缺了‘无犯罪记录’证明，当时懵了，因为这材料需要回学校保卫科去办。还好，联系到了在南京的同学和辅导员，虽然麻烦，但还是搞定了。接下来就是正式入职，因为之前也有在IBM 上海Office实习的经历，对IBM的总体情况和公司文化比较了解，所以和同事融入较快。但是计划赶不上变化，我的hiring manager所在的部门研发计划有变，导致不需要太多的dev，所以就被transfer到其他的team，不过这几个team所做的产品相关性非常高，知识技术上稍有不同。IBM西安office主要做的产品是高性能计算相关，主要的核心产品要两款，其他的产品都是作为其add-on。技术的选择上java多一些，在core方面会有C&amp;amp;C++。令我不太满意的地方是，工作中对业务的熟悉程度远大于对技术的熟练上，这可能是大商业公司的通病。
对2016的期待 又到了许愿时间了。要做也要做有梦想的咸鱼～～
希望能去自己感兴趣的team，做自己感兴趣的事儿。 希望抽出更多的时间看书，学习以及写博客。 希望能多在工作中和外籍同事交流，锻炼自己的口语。 希望坚持体育锻炼，一周跑两次步，周末打一次球。 希望感情能够稳定下来。</description></item><item><title>Dota中的Ban&amp;Pick机制与陪审团</title><link>https://morven.life/posts/ban-pick_in_dota_and_jury/</link><pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate><guid>https://morven.life/posts/ban-pick_in_dota_and_jury/</guid><description>Dota(Defense of the Ancients)最初只是由《魔兽争霸3：冰封王座》的一个RPG地图衍变而来，是一款支持多人即时对战的战略游戏。最早的Dota地图则在混乱之治时代就出现了，一位叫做Euls的玩家制作了第一张Dota地图-Roc Dota。随后，经过多个玩家进一步完善，以及IceFrog的多次修正和更新，游戏最终定格为两个阵营，玩家需要操作英雄，通过摧毁对方遗迹建筑来取得最终的胜利。这种多人在线的竞技模式后来被称为“Dota类游戏”，对之后产生的多个竞技类游戏产生了深远的影响。
Ban&amp;amp;Pick机制 如何在比赛中选出一套让比赛的双方都能接受的英雄阵容，同时又要体现出竞技游戏的对抗性和平衡性。一般来说，游戏的对抗性表现为游戏元素的多元化。Dota这款游戏共有102名英雄，有两个阵营各选五名英雄分辨占据近卫和天灾两方，分三路进行对抗。当然五名英雄的职责各不相同，Carry位通常在地图的优势路发育，同时要有清晰的大局观，在比赛的后期发挥主力作用。Solo位，一般在中路对抗，该位置要求选手在中前期有很强的带节奏能力。Ganker，也称为抗压位，游走于各路，配合队友完成击杀对方英雄。剩余的两个位置称为辅助位，主要配合团队控制视野，帮助队友打出优势，从而在战略上压制对方。
假定Dota的英雄完全按照其所处的位置排列，（实战中完全不这样，经常原本12号位的英雄随着版本更迭称为辅助，反之亦然）如此每个位置的英雄也就约20名，如果我们再放弃掉一些不常用的英雄的话，实际让选手能够顺畅选择的英雄其实不过尔尔。这时，如何让场上选手得以公平竞技打出激情，就必须通过一套规则，选出一套让比赛双方均能够接受的阵容，从而增加比赛的观赏性。那么，选手们应当如何选取自己心仪的英雄呢？
Dota的设计者“IceFrog”最终采用了一套&amp;quot;Ban&amp;amp;Pick&amp;quot;机制，这套机制来源于千年之前一个在法国的英国人的发明。
陪审制 1135年，英国国王亨利一世去世，根据一份协定，英国国王的继承者将由自幼生长在法国的青年亨利二世于1154年担任。亨利二世是一位非常有野心的国王，开创了一个时代，人称“金雀花王朝”。可刚上任的他作为一个“外国人”，只要想在一个地区内树立权威，那么司法权则应当是极为重要的手段之一。在当时，高贵的法国贵族又如何听得懂英格兰的那些土话呢？如果听不懂别人说什么，作为一国之君，又如何来审理民间纠纷以确立自己的声望？亨利二世又能以怎样的方式，设计出一套完美的制度呢？
最开始的时候，每当出现土地方面的诉讼时，会由法院发给争议双方一纸令状(令状或由司法大臣发布)，命令争议双方找来十二名和本案无关的人士在上帝面前发誓之后，做出对案件事实方面的裁决。而亨利二世则带人组成巡回法院，当他巡回到该地之后，对案件做出裁决。毕竟，由自己亲手提拔的大臣是懂法语的，自己审完案子下发，再由手下将其翻译成英语传达，是再好不过的事了。
但是，那十二个与本案无关的人，是怎么选出来的？
陪审员的选择一开始是随机选，而且选的比较多。然后双方会有机会了解备选的人选，并且通过辩论来决定留下谁。当然，双方都会尽量留下对自己有利的陪审员（Pick），主要是根据职业，性别，年龄来判断是否会同情被告。还有几个机会可以不必给出理由而否定某一个陪审员（Ban）。最后确定一个名单。名单上的人就得去了……因为这个是公民义务的一部分，除非有特殊原因，否则必须去，要是故意不去那就要被起诉。同时，还会有几个备用人选，也必须去，以防有人生病或者出事来不了。 还有一个是选择陪审员的时候会尽量避免选择某些职业，比如律师，法学院的学生，老师，教授等等。主要是排除类似“权威”或者习惯教育指导别人的人，以防以一人之力左右整个陪审团的意见。
对Dota来说，情况也正是如此，“IceFrog”必须采取一套制度，让选手们首选去掉那些对自己特别不利的英雄，从而不会让先选英雄的一方率先抢走版本当中最热门也是最厉害的英雄，以降低游戏的对抗程度。说白了，对Dota来说，选手们竞技环境越是公平，游戏的对抗程度越高，游戏的活力也就越持久。
不过这套制度并非一经制定就一成不变，而是会根据玩家不断的反馈与游戏平衡的调整随之改进。Dota的Ban&amp;amp;Pick规则方式的更迭几乎和Dota的游戏版本更迭频率一致。从Dota6.28X版本开始到现在的Dota6.83，每一代版本非但在游戏本身的平衡性上做出了重大调整，在Ban&amp;amp;Pick规则上，&amp;ldquo;IceFrog&amp;quot;也从未掉以轻心。不论是Ban&amp;amp;Pick时间还是顺序，甚至于到底Ban掉多少名英雄，也是历经多个版本才最终确立。</description></item><item><title>回首「2014」</title><link>https://morven.life/posts/backward_glance_of_2014/</link><pubDate>Fri, 26 Dec 2014 00:00:00 +0000</pubDate><guid>https://morven.life/posts/backward_glance_of_2014/</guid><description>一年将尽，一年伊始，兜兜转转，2014年就这样走近年末，不禁让人措手不及。似乎是一样的时光、一样的节奏、一样的人物，变换着不同的场景、不同的面孔、不同的心情，重重叠叠过去了一年。过去的一年，虽然忙碌，但也收获不少。如果一定要说一些年度关键词，那就是学分与课程、百度实习以及校园招聘。
学分与课程 从去年的9月份到今年的五月初，忙碌的两个学期，选择修完了研究生的大部分课程，这样五月份以后就可以外出实习。总的来看，研究生的课程是本科课程的扩展与深入。比如《高级数据库》这门课，本科也开，所讲内容大部分是数据库基本知识，关系型数据库设计以及SQL语句优化。研究生阶段则更深入，更倾向于数据库读写性能分析，各种关系型数据库横向对比，动手实践特殊类型的数据库设计，当然也包括对非关系型数据库的探讨。其他课程与此类似，包括高级网络，分布式设计与分析，数据挖掘与知识发现等等，基本上覆盖了计算机相关专业的主要课程。也利用研一空闲时间，复习了数据结构和算法，刷LeetCode，填本科阶段挖下的坑。到五月份主要课程都已修完，貌似还多修了两门课。研究生的成绩普遍较高，平均分达到了90分左右（现在才意识到了要好好学习，哈哈～）。研究生阶段还有一门研讨课，不过我选的研讨课自己不是特别感兴趣，所以也没有花太多的时间在上面，水水而已。
百度实习 关于今年的实习，本来想专门写一篇文章总结一下，后来由于找工作忙碌就搁置了（其实都是借口），这里就简单总结一下。今年5月份拿到百度网页搜索部的实习Offer，之前听说百度实习基本能留下正式工作，但是当时选择去百度实习的原因不是想拿百度的正式Offer，而是想去体验一下国内顶级的互联网公司，同时也增加自己的项目经验，为下半年的找工作打下基础。 先说说面试吧，百度的实习面试分为两轮技术面，HR都会跟你预约面试时间，这一点还是非常赞的。第一轮面试的大部分是基础数据结构与算法，当然也问了一些关于C++的问题，比较轻松。第二轮面试就比较开放了，当时我的面试官就是后来我实习的mentor，问题不是特别多，第一个是操作系统内存管理的，接下来，问了我对于Mysql的认识，包括mysql读写极限的多少，以及底层一些读写机制等等，最后就是一道算法题，自己回答的不是很好。不过还好，大约一周以后，就收到了Offer。 5月初正式入职，在百度网页搜索部，我所在的team在上海Office有4个DEV，主要负责抓取工作，包括百度搜索的抓取以及其他各个产品线的抓取。百度为了规范公司各个产品线的抓取，避免不必要的封禁和抓取混乱的现状，特意将抓取平台化，命名为CSPUB，公司内部各个产品线可以在CSPUB上注册，编辑抓取目标然后发起抓取。主要的开发语言是C++和PHP，自己平时也用Python写一些脚本检测线上机器的运行状况。百度确实是个年轻有活力的公司，内部员工干活都很积极，对新技术热情很高，部门内部经常会有一些技术分享，可以学到不少在学校根本不会接触到的架构知识。我的mentor是个对工作效率追求极致的人，一度使我感觉跟不上节奏，后来习惯了之后才发现自己受益颇多。到了8月份，由于开始找工作，自己也没有留上海的想法，遂辞职，返校找工作。
校园招聘 今年最重要的事情应该就是找工作了，可就是这最重要的事儿，我却刚开始就错过了一次绝佳的机会－阿里校招。不过阿里今年的校招也是让人不能理解，9月份之前就开始笔试，而且是线上笔试。我笔试当天晚上才得知消息，为时已晚。不过我对于自己在哪里工作找已有想法，因为女朋友的缘故，我会优先选择回西安工作。所以，当周围的同学都在准备BAT面试的时候，我在关注西安为数不多的IT公司校招情况。机缘巧合，之前发给IBM西安office HR的简历被筛选了，HR安排我去公司笔试和面试。接下来的一周我在西安参加了笔试一次面试三次，虽然HR说十一之后才会有消息，但当时感觉应该十拿九稳了。不出意料，回到南京之后，面试Manager通过电话给了口头offer，薪水比想象的要高，再加上之前有在IBM的实习经历，应聘职位也和自己的方向比较相关，再次考虑到在西安IT行业不景气的现状，所以也基本定下来了。当然，这时候还没到十月份，校招才刚开始，所以也准备了其他公司的笔试面试，包括百度，大众点评以及一些小公司。其中百度和大众点评都拿到Offer。在西安呆的一周内错过了腾讯，美团的校招。进入11月份基本周围同学都拿到Offer，校招也应该结束了。 总的来说，校招没必要很纠结，没必要各个公司招聘都参加，那要只会心力交瘁。想清楚自己适合什么样的公司，决定去哪个城市发展，这样自己目标就明确多了，准备起来也有条不紊，自然结果也不会很差。
新一年的愿望 希望将愿望写出来，能够更加有动力去实现。
希望抓住最后的校园时光，感谢所有的老师，和最好的哥们儿好好告别。 希望公司入职能去好的team，找到nice的mentor，做自己想做的事情。 希望能抽出更多的时间看书，不管是技术方面的书籍还是人文历史方面的。 希望能学点设计方面的知识，尤其是UI，UX方面的。 希望在工作中锻炼自己的口语，再不要吃老本。 希望多多参与开源的项目，保持博客更新的频率。 希望能多陪陪家人出去旅游&amp;hellip;</description></item><item><title>IBM实习总结</title><link>https://morven.life/posts/internship-at-ibm/</link><pubDate>Mon, 01 Apr 2013 00:00:00 +0000</pubDate><guid>https://morven.life/posts/internship-at-ibm/</guid><description>今天上午和新来的实习生交接了自己的工作，中午约同事们一起吃了午饭，之后很快办完了离职手续，自己为期6个多月的IBM实习也画上了句号，不管是不是完美，对于我自己来说，大学四年的第一份实习无疑对我价值颇高。这篇文章我主要说说我在IBM实习的经历以及感受。
实习时间 我出去实习的时间比较晚，根据学院规定暑假就可以开实习，时间不能少于6个月，所以最好应该在4，5月份找实习，而我在4，5月份却忙于备考GRE和Toefl，自然也错过了找实习的黄金时间。暑假结束后，我才开始计划找实习。开始一心想着去互联网公司，也正因为一直在等待这样的机会而浪费了不少时间。直达9月份，刷小百合看到一个不错的实习机会，也就是接下来6个多月我所在的IBM JTC部门。当时心动的主要原因是这个实习职位所在的Team是做JVM的，也是自己的兴趣方向所在，所以果断投了简历。
面试 IBM的面试分为技术面和英文面，可能当时急缺实习生，所以面试安排得很紧凑。自己也比较幸运，因为Team里有已经毕业的学长Ray，多少会有加分：）。因为是JVM小组，所以技术面都是关于Java的，比如Java多线程，IO，容器类以及反射机制等，没有问算法题。现在回想起来，这些知识确实在每天的实习工作中都会有所接触。接下来是英文面，主要面试口语。因为是招聘实习生，所以也没有太高的要求，基本的听说读写熟练就没有问题。最后面试官问我有没有问题想问他的，我进一步问了关于实习职位的工作内容，当时的面试官，也就是后来我的mentor Sanhong，人非常nice，blabla&amp;hellip;讲了一大堆，虽然当时也不是很懂，但真心觉得很NB。过了一个周左右，收到面试通过的邮件，几天后搭乘了去上海的动车，开始了我的IBM实习。
工作环境 IBM的工作环境很不错，整个办公室是个很大的开放式的环境，整个部门，从部门老大，到Manager，到实习生都在这里工作。我去的时候领到了一台旧电脑，是的，实习生用的都是旧电脑，不多这也完全不影响开发，因为基本的开发测试都是在云端，通过SecureCRT SSH登录到云端Linux。也正是从这开始彻底喜欢上了Unix/Linux哲学：
simple and beautiful &amp;ndash;Wikipedia
对于习惯了IDE的我一开始会有些不适应，不过后来发现在Terminal下工作效率丝毫不逊于IDE。
工作内容 IBM比较注重基础性软件研发，特别在中国成立CDL(China Development Lab)，我所在的部门JTC(Java Technology Center)正式属于CDL，而我所在的小组从事的是JVM的开发。IBM的J9 JVM与Oracle 的Hotspot VM齐名，是两大主流的JVM之一，为IBM许多Java产品提供支持，比如WebSphere，以及一些开源的产品如Apache Harmony。现在我们team的工作是与加拿大以及印度的同事合作，基于J9VM开发Multitennancy JVM，通过在单一的多租户 JVM 中运行多个应用程序，云系统可以加快应用程序的启动时间，并减少其内存占用。这将作为IBM Java8的一个新特性。因为是实习生，所以我的工作大多是于解决Bug，性能调优以及测试相关。我的mentor Sanhong是个技术大牛，人也非常nice，我很庆幸能遇到这样的导师。mentor对我的帮助不仅是技术上的提高，更多的是工作方式的改进，这些东西在学校的绝对学习不到的。
IBM软件过程管理 特别要提到的是IBM的软件过程管理方式，IBM使用敏捷软件开发方式，更具体点儿是Scrum，每两周一次Sprint迭代，每天都会下午选个时间Daily Scrum Meeting，控制在15分钟左右，每个人都必须发言，也包括实习生，向所有成员当面汇报你昨天完成了什么，并且向所有成员承诺你今天要完成什么，同时遇到不能解决的问题也可以提出，每个人回答完成后，要走到黑板前更新自己的 Sprint burn down（Sprint燃尽图）。同时，Team会做到每天至少一个Build，即一个成功编译，可以运行的版本。虽然这些东西在学校也学过，也有实践课程可以体验，但是感觉多少还是是纸上谈兵。如今在算是真正有机会在工作机会中体会Scrum。和其他外企一样，IBM工作语言是英语，虽然平时和同事交流可以用中文，但是邮件以及Message全部都是英文，而且每周一次国际会议也是用英文交流。
总结 在IBM工作，最重要的是团队合作，虽然平时工作的压力不大，实习生见见“世面”是可以的，但如果真要在技术上有所提升，建议IBM和其他类似的外企可以不用去了，可以去百度，阿里这样的互联网公司，对于锻炼自己的技术应该帮助更大。当然，也可以选择一些创业公司，现在正值互联网蓬勃发展的时候，去小型创业公司，自己可以独当一面，项目经验提升也是必然的。当然小型公司也有自己的缺陷，缺少自己的平台，过多利用现有的技术做产品，对于想从事底层操作系统的基础架构的同学就要重新考虑了。 不过总体来说，通过这次的实习经历，我学习到了不少的东西，不只是技术上，更多是关于工作方式以及团队意识。当然，也第一次去魔都体验了码农的生活，将自己在学校学习的知识利用到了实践当中，赚了自己的第一笔钱。</description></item></channel></rss>